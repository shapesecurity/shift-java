// Generated by src/generate-spec-java.js 

/**
 * Copyright 2015 Shape Security, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.shapesecurity.shift.ast;

import org.jetbrains.annotations.NotNull;
import com.shapesecurity.functional.data.HashCodeBuilder;
import com.shapesecurity.functional.data.ImmutableList;
import com.shapesecurity.shift.ast.operators.Precedence;

public class CallExpression extends Expression
{

  @NotNull
  public final ExpressionSuper callee;

  @NotNull
  public final ImmutableList<SpreadElementExpression> arguments;

  public CallExpression (@NotNull ExpressionSuper callee, @NotNull ImmutableList<SpreadElementExpression> arguments)
  {
    super();
    this.callee = callee;
    this.arguments = arguments;
  }

  @NotNull
  public ExpressionSuper getCallee()
  {
    return this.callee;
  }

  @NotNull
  public ImmutableList<SpreadElementExpression> getArguments()
  {
    return this.arguments;
  }

  @NotNull
  public CallExpression setCallee(@NotNull ExpressionSuper callee)
  {
    return new CallExpression(callee, this.arguments);
  }

  @NotNull
  public CallExpression setArguments(@NotNull ImmutableList<SpreadElementExpression> arguments)
  {
    return new CallExpression(this.callee, arguments);
  }

  @Override
  @NotNull
  public Precedence getPrecedence()
  {
    return Precedence.CALL;
  }

}