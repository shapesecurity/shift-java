// Generated by shift-java-gen/ast.js

/*
 * Copyright 2016 Shape Security, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.shapesecurity.shift.es2016.ast;

import org.jetbrains.annotations.NotNull;
import com.shapesecurity.functional.data.HashCodeBuilder;
import com.shapesecurity.functional.data.ImmutableList;
import com.shapesecurity.functional.data.Maybe;

public abstract class Class {
    @NotNull
    public final Maybe<Expression> _super;

    @NotNull
    public final ImmutableList<ClassElement> elements;


    public Class (@NotNull Maybe<Expression> _super, @NotNull ImmutableList<ClassElement> elements) {
        this._super = _super;
        this.elements = elements;
    }


    @Override
    public boolean equals(Object object) {
        return object instanceof Class && this._super.equals(((Class) object)._super) && this.elements.equals(((Class) object).elements);
    }


    @Override
    public int hashCode() {
        int code = HashCodeBuilder.put(0, "Class");
        code = HashCodeBuilder.put(code, this._super);
        code = HashCodeBuilder.put(code, this.elements);
        return code;
    }

}
