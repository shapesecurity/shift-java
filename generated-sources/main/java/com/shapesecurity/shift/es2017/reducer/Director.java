// Generated by director.js
/**
 * Copyright 2018 Shape Security, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package com.shapesecurity.shift.es2017.reducer;

import com.shapesecurity.functional.data.ImmutableList;
import com.shapesecurity.functional.data.Maybe;
import com.shapesecurity.shift.es2017.ast.*;

import javax.annotation.Nonnull;


public final class Director {

    @Nonnull
    public static <State> State reduceArrayAssignmentTarget(
      @Nonnull Reducer<State> reducer,
      @Nonnull ArrayAssignmentTarget node) {
        return reducer.reduceArrayAssignmentTarget(node, reduceListMaybeAssignmentTargetAssignmentTargetWithDefault(reducer, node.elements), reduceMaybeAssignmentTarget(reducer, node.rest));
    }

    @Nonnull
    public static <State> State reduceArrayBinding(
      @Nonnull Reducer<State> reducer,
      @Nonnull ArrayBinding node) {
        return reducer.reduceArrayBinding(node, reduceListMaybeBindingBindingWithDefault(reducer, node.elements), reduceMaybeBinding(reducer, node.rest));
    }

    @Nonnull
    public static <State> State reduceArrayExpression(
      @Nonnull Reducer<State> reducer,
      @Nonnull ArrayExpression node) {
        return reducer.reduceArrayExpression(node, reduceListMaybeSpreadElementExpression(reducer, node.elements));
    }

    @Nonnull
    public static <State> State reduceArrowExpression(
      @Nonnull Reducer<State> reducer,
      @Nonnull ArrowExpression node) {
        return reducer.reduceArrowExpression(node, reduceFormalParameters(reducer, node.params), reduceFunctionBodyExpression(reducer, node.body));
    }

    @Nonnull
    public static <State> State reduceAssignmentExpression(
      @Nonnull Reducer<State> reducer,
      @Nonnull AssignmentExpression node) {
        return reducer.reduceAssignmentExpression(node, reduceAssignmentTarget(reducer, node.binding), reduceExpression(reducer, node.expression));
    }

    @Nonnull
    public static <State> State reduceAssignmentTarget(
      @Nonnull Reducer<State> reducer,
      @Nonnull AssignmentTarget node) {
        if (node instanceof AssignmentTargetPattern) {
            return reduceAssignmentTargetPattern(reducer, (AssignmentTargetPattern) node);
        } else if (node instanceof SimpleAssignmentTarget) {
            return reduceSimpleAssignmentTarget(reducer, (SimpleAssignmentTarget) node);
        } else {
            throw new RuntimeException("Not reached");
        }
    }

    @Nonnull
    public static <State> State reduceAssignmentTargetAssignmentTargetWithDefault(
      @Nonnull Reducer<State> reducer,
      @Nonnull AssignmentTargetAssignmentTargetWithDefault node) {
        if (node instanceof AssignmentTarget) {
            return reduceAssignmentTarget(reducer, (AssignmentTarget) node);
        } else if (node instanceof AssignmentTargetWithDefault) {
            return reduceAssignmentTargetWithDefault(reducer, (AssignmentTargetWithDefault) node);
        } else {
            throw new RuntimeException("Not reached");
        }
    }

    @Nonnull
    public static <State> State reduceAssignmentTargetIdentifier(
      @Nonnull Reducer<State> reducer,
      @Nonnull AssignmentTargetIdentifier node) {
        return reducer.reduceAssignmentTargetIdentifier(node);
    }

    @Nonnull
    public static <State> State reduceAssignmentTargetPattern(
      @Nonnull Reducer<State> reducer,
      @Nonnull AssignmentTargetPattern node) {
        if (node instanceof ObjectAssignmentTarget) {
            return reduceObjectAssignmentTarget(reducer, (ObjectAssignmentTarget) node);
        } else if (node instanceof ArrayAssignmentTarget) {
            return reduceArrayAssignmentTarget(reducer, (ArrayAssignmentTarget) node);
        } else {
            throw new RuntimeException("Not reached");
        }
    }

    @Nonnull
    public static <State> State reduceAssignmentTargetProperty(
      @Nonnull Reducer<State> reducer,
      @Nonnull AssignmentTargetProperty node) {
        if (node instanceof AssignmentTargetPropertyIdentifier) {
            return reduceAssignmentTargetPropertyIdentifier(reducer, (AssignmentTargetPropertyIdentifier) node);
        } else if (node instanceof AssignmentTargetPropertyProperty) {
            return reduceAssignmentTargetPropertyProperty(reducer, (AssignmentTargetPropertyProperty) node);
        } else {
            throw new RuntimeException("Not reached");
        }
    }

    @Nonnull
    public static <State> State reduceAssignmentTargetPropertyIdentifier(
      @Nonnull Reducer<State> reducer,
      @Nonnull AssignmentTargetPropertyIdentifier node) {
        return reducer.reduceAssignmentTargetPropertyIdentifier(node, reduceAssignmentTargetIdentifier(reducer, node.binding), reduceMaybeExpression(reducer, node.init));
    }

    @Nonnull
    public static <State> State reduceAssignmentTargetPropertyProperty(
      @Nonnull Reducer<State> reducer,
      @Nonnull AssignmentTargetPropertyProperty node) {
        return reducer.reduceAssignmentTargetPropertyProperty(node, reducePropertyName(reducer, node.name), reduceAssignmentTargetAssignmentTargetWithDefault(reducer, node.binding));
    }

    @Nonnull
    public static <State> State reduceAssignmentTargetWithDefault(
      @Nonnull Reducer<State> reducer,
      @Nonnull AssignmentTargetWithDefault node) {
        return reducer.reduceAssignmentTargetWithDefault(node, reduceAssignmentTarget(reducer, node.binding), reduceExpression(reducer, node.init));
    }

    @Nonnull
    public static <State> State reduceAwaitExpression(
      @Nonnull Reducer<State> reducer,
      @Nonnull AwaitExpression node) {
        return reducer.reduceAwaitExpression(node, reduceExpression(reducer, node.expression));
    }

    @Nonnull
    public static <State> State reduceBinaryExpression(
      @Nonnull Reducer<State> reducer,
      @Nonnull BinaryExpression node) {
        return reducer.reduceBinaryExpression(node, reduceExpression(reducer, node.left), reduceExpression(reducer, node.right));
    }

    @Nonnull
    public static <State> State reduceBinding(
      @Nonnull Reducer<State> reducer,
      @Nonnull Binding node) {
        if (node instanceof BindingPattern) {
            return reduceBindingPattern(reducer, (BindingPattern) node);
        } else if (node instanceof BindingIdentifier) {
            return reduceBindingIdentifier(reducer, (BindingIdentifier) node);
        } else {
            throw new RuntimeException("Not reached");
        }
    }

    @Nonnull
    public static <State> State reduceBindingBindingWithDefault(
      @Nonnull Reducer<State> reducer,
      @Nonnull BindingBindingWithDefault node) {
        if (node instanceof Binding) {
            return reduceBinding(reducer, (Binding) node);
        } else if (node instanceof BindingWithDefault) {
            return reduceBindingWithDefault(reducer, (BindingWithDefault) node);
        } else {
            throw new RuntimeException("Not reached");
        }
    }

    @Nonnull
    public static <State> State reduceBindingIdentifier(
      @Nonnull Reducer<State> reducer,
      @Nonnull BindingIdentifier node) {
        return reducer.reduceBindingIdentifier(node);
    }

    @Nonnull
    public static <State> State reduceBindingPattern(
      @Nonnull Reducer<State> reducer,
      @Nonnull BindingPattern node) {
        if (node instanceof ObjectBinding) {
            return reduceObjectBinding(reducer, (ObjectBinding) node);
        } else if (node instanceof ArrayBinding) {
            return reduceArrayBinding(reducer, (ArrayBinding) node);
        } else {
            throw new RuntimeException("Not reached");
        }
    }

    @Nonnull
    public static <State> State reduceBindingProperty(
      @Nonnull Reducer<State> reducer,
      @Nonnull BindingProperty node) {
        if (node instanceof BindingPropertyIdentifier) {
            return reduceBindingPropertyIdentifier(reducer, (BindingPropertyIdentifier) node);
        } else if (node instanceof BindingPropertyProperty) {
            return reduceBindingPropertyProperty(reducer, (BindingPropertyProperty) node);
        } else {
            throw new RuntimeException("Not reached");
        }
    }

    @Nonnull
    public static <State> State reduceBindingPropertyIdentifier(
      @Nonnull Reducer<State> reducer,
      @Nonnull BindingPropertyIdentifier node) {
        return reducer.reduceBindingPropertyIdentifier(node, reduceBindingIdentifier(reducer, node.binding), reduceMaybeExpression(reducer, node.init));
    }

    @Nonnull
    public static <State> State reduceBindingPropertyProperty(
      @Nonnull Reducer<State> reducer,
      @Nonnull BindingPropertyProperty node) {
        return reducer.reduceBindingPropertyProperty(node, reducePropertyName(reducer, node.name), reduceBindingBindingWithDefault(reducer, node.binding));
    }

    @Nonnull
    public static <State> State reduceBindingWithDefault(
      @Nonnull Reducer<State> reducer,
      @Nonnull BindingWithDefault node) {
        return reducer.reduceBindingWithDefault(node, reduceBinding(reducer, node.binding), reduceExpression(reducer, node.init));
    }

    @Nonnull
    public static <State> State reduceBlock(
      @Nonnull Reducer<State> reducer,
      @Nonnull Block node) {
        return reducer.reduceBlock(node, reduceListStatement(reducer, node.statements));
    }

    @Nonnull
    public static <State> State reduceBlockStatement(
      @Nonnull Reducer<State> reducer,
      @Nonnull BlockStatement node) {
        return reducer.reduceBlockStatement(node, reduceBlock(reducer, node.block));
    }

    @Nonnull
    public static <State> State reduceBreakStatement(
      @Nonnull Reducer<State> reducer,
      @Nonnull BreakStatement node) {
        return reducer.reduceBreakStatement(node);
    }

    @Nonnull
    public static <State> State reduceCallExpression(
      @Nonnull Reducer<State> reducer,
      @Nonnull CallExpression node) {
        return reducer.reduceCallExpression(node, reduceExpressionSuper(reducer, node.callee), reduceListSpreadElementExpression(reducer, node.arguments));
    }

    @Nonnull
    public static <State> State reduceCatchClause(
      @Nonnull Reducer<State> reducer,
      @Nonnull CatchClause node) {
        return reducer.reduceCatchClause(node, reduceBinding(reducer, node.binding), reduceBlock(reducer, node.body));
    }

    @Nonnull
    public static <State> State reduceClassDeclaration(
      @Nonnull Reducer<State> reducer,
      @Nonnull ClassDeclaration node) {
        return reducer.reduceClassDeclaration(node, reduceBindingIdentifier(reducer, node.name), reduceMaybeExpression(reducer, node._super), reduceListClassElement(reducer, node.elements));
    }

    @Nonnull
    public static <State> State reduceClassElement(
      @Nonnull Reducer<State> reducer,
      @Nonnull ClassElement node) {
        return reducer.reduceClassElement(node, reduceMethodDefinition(reducer, node.method));
    }

    @Nonnull
    public static <State> State reduceClassExpression(
      @Nonnull Reducer<State> reducer,
      @Nonnull ClassExpression node) {
        return reducer.reduceClassExpression(node, reduceMaybeBindingIdentifier(reducer, node.name), reduceMaybeExpression(reducer, node._super), reduceListClassElement(reducer, node.elements));
    }

    @Nonnull
    public static <State> State reduceCompoundAssignmentExpression(
      @Nonnull Reducer<State> reducer,
      @Nonnull CompoundAssignmentExpression node) {
        return reducer.reduceCompoundAssignmentExpression(node, reduceSimpleAssignmentTarget(reducer, node.binding), reduceExpression(reducer, node.expression));
    }

    @Nonnull
    public static <State> State reduceComputedMemberAssignmentTarget(
      @Nonnull Reducer<State> reducer,
      @Nonnull ComputedMemberAssignmentTarget node) {
        return reducer.reduceComputedMemberAssignmentTarget(node, reduceExpressionSuper(reducer, node.object), reduceExpression(reducer, node.expression));
    }

    @Nonnull
    public static <State> State reduceComputedMemberExpression(
      @Nonnull Reducer<State> reducer,
      @Nonnull ComputedMemberExpression node) {
        return reducer.reduceComputedMemberExpression(node, reduceExpressionSuper(reducer, node.object), reduceExpression(reducer, node.expression));
    }

    @Nonnull
    public static <State> State reduceComputedPropertyName(
      @Nonnull Reducer<State> reducer,
      @Nonnull ComputedPropertyName node) {
        return reducer.reduceComputedPropertyName(node, reduceExpression(reducer, node.expression));
    }

    @Nonnull
    public static <State> State reduceConditionalExpression(
      @Nonnull Reducer<State> reducer,
      @Nonnull ConditionalExpression node) {
        return reducer.reduceConditionalExpression(node, reduceExpression(reducer, node.test), reduceExpression(reducer, node.consequent), reduceExpression(reducer, node.alternate));
    }

    @Nonnull
    public static <State> State reduceContinueStatement(
      @Nonnull Reducer<State> reducer,
      @Nonnull ContinueStatement node) {
        return reducer.reduceContinueStatement(node);
    }

    @Nonnull
    public static <State> State reduceDataProperty(
      @Nonnull Reducer<State> reducer,
      @Nonnull DataProperty node) {
        return reducer.reduceDataProperty(node, reducePropertyName(reducer, node.name), reduceExpression(reducer, node.expression));
    }

    @Nonnull
    public static <State> State reduceDebuggerStatement(
      @Nonnull Reducer<State> reducer,
      @Nonnull DebuggerStatement node) {
        return reducer.reduceDebuggerStatement(node);
    }

    @Nonnull
    public static <State> State reduceDirective(
      @Nonnull Reducer<State> reducer,
      @Nonnull Directive node) {
        return reducer.reduceDirective(node);
    }

    @Nonnull
    public static <State> State reduceDoWhileStatement(
      @Nonnull Reducer<State> reducer,
      @Nonnull DoWhileStatement node) {
        return reducer.reduceDoWhileStatement(node, reduceStatement(reducer, node.body), reduceExpression(reducer, node.test));
    }

    @Nonnull
    public static <State> State reduceEmptyStatement(
      @Nonnull Reducer<State> reducer,
      @Nonnull EmptyStatement node) {
        return reducer.reduceEmptyStatement(node);
    }

    @Nonnull
    public static <State> State reduceExport(
      @Nonnull Reducer<State> reducer,
      @Nonnull Export node) {
        return reducer.reduceExport(node, reduceFunctionDeclarationClassDeclarationVariableDeclaration(reducer, node.declaration));
    }

    @Nonnull
    public static <State> State reduceExportAllFrom(
      @Nonnull Reducer<State> reducer,
      @Nonnull ExportAllFrom node) {
        return reducer.reduceExportAllFrom(node);
    }

    @Nonnull
    public static <State> State reduceExportDeclaration(
      @Nonnull Reducer<State> reducer,
      @Nonnull ExportDeclaration node) {
        if (node instanceof ExportAllFrom) {
            return reduceExportAllFrom(reducer, (ExportAllFrom) node);
        } else if (node instanceof ExportFrom) {
            return reduceExportFrom(reducer, (ExportFrom) node);
        } else if (node instanceof ExportLocals) {
            return reduceExportLocals(reducer, (ExportLocals) node);
        } else if (node instanceof Export) {
            return reduceExport(reducer, (Export) node);
        } else if (node instanceof ExportDefault) {
            return reduceExportDefault(reducer, (ExportDefault) node);
        } else {
            throw new RuntimeException("Not reached");
        }
    }

    @Nonnull
    public static <State> State reduceExportDefault(
      @Nonnull Reducer<State> reducer,
      @Nonnull ExportDefault node) {
        return reducer.reduceExportDefault(node, reduceFunctionDeclarationClassDeclarationExpression(reducer, node.body));
    }

    @Nonnull
    public static <State> State reduceExportFrom(
      @Nonnull Reducer<State> reducer,
      @Nonnull ExportFrom node) {
        return reducer.reduceExportFrom(node, reduceListExportFromSpecifier(reducer, node.namedExports));
    }

    @Nonnull
    public static <State> State reduceExportFromSpecifier(
      @Nonnull Reducer<State> reducer,
      @Nonnull ExportFromSpecifier node) {
        return reducer.reduceExportFromSpecifier(node);
    }

    @Nonnull
    public static <State> State reduceExportLocalSpecifier(
      @Nonnull Reducer<State> reducer,
      @Nonnull ExportLocalSpecifier node) {
        return reducer.reduceExportLocalSpecifier(node, reduceIdentifierExpression(reducer, node.name));
    }

    @Nonnull
    public static <State> State reduceExportLocals(
      @Nonnull Reducer<State> reducer,
      @Nonnull ExportLocals node) {
        return reducer.reduceExportLocals(node, reduceListExportLocalSpecifier(reducer, node.namedExports));
    }

    @Nonnull
    public static <State> State reduceExpression(
      @Nonnull Reducer<State> reducer,
      @Nonnull Expression node) {
        if (node instanceof MemberExpression) {
            return reduceMemberExpression(reducer, (MemberExpression) node);
        } else if (node instanceof ClassExpression) {
            return reduceClassExpression(reducer, (ClassExpression) node);
        } else if (node instanceof LiteralBooleanExpression) {
            return reduceLiteralBooleanExpression(reducer, (LiteralBooleanExpression) node);
        } else if (node instanceof LiteralInfinityExpression) {
            return reduceLiteralInfinityExpression(reducer, (LiteralInfinityExpression) node);
        } else if (node instanceof LiteralNullExpression) {
            return reduceLiteralNullExpression(reducer, (LiteralNullExpression) node);
        } else if (node instanceof LiteralNumericExpression) {
            return reduceLiteralNumericExpression(reducer, (LiteralNumericExpression) node);
        } else if (node instanceof LiteralRegExpExpression) {
            return reduceLiteralRegExpExpression(reducer, (LiteralRegExpExpression) node);
        } else if (node instanceof LiteralStringExpression) {
            return reduceLiteralStringExpression(reducer, (LiteralStringExpression) node);
        } else if (node instanceof ArrayExpression) {
            return reduceArrayExpression(reducer, (ArrayExpression) node);
        } else if (node instanceof ArrowExpression) {
            return reduceArrowExpression(reducer, (ArrowExpression) node);
        } else if (node instanceof AssignmentExpression) {
            return reduceAssignmentExpression(reducer, (AssignmentExpression) node);
        } else if (node instanceof BinaryExpression) {
            return reduceBinaryExpression(reducer, (BinaryExpression) node);
        } else if (node instanceof CallExpression) {
            return reduceCallExpression(reducer, (CallExpression) node);
        } else if (node instanceof CompoundAssignmentExpression) {
            return reduceCompoundAssignmentExpression(reducer, (CompoundAssignmentExpression) node);
        } else if (node instanceof ConditionalExpression) {
            return reduceConditionalExpression(reducer, (ConditionalExpression) node);
        } else if (node instanceof FunctionExpression) {
            return reduceFunctionExpression(reducer, (FunctionExpression) node);
        } else if (node instanceof IdentifierExpression) {
            return reduceIdentifierExpression(reducer, (IdentifierExpression) node);
        } else if (node instanceof NewExpression) {
            return reduceNewExpression(reducer, (NewExpression) node);
        } else if (node instanceof NewTargetExpression) {
            return reduceNewTargetExpression(reducer, (NewTargetExpression) node);
        } else if (node instanceof ObjectExpression) {
            return reduceObjectExpression(reducer, (ObjectExpression) node);
        } else if (node instanceof UnaryExpression) {
            return reduceUnaryExpression(reducer, (UnaryExpression) node);
        } else if (node instanceof TemplateExpression) {
            return reduceTemplateExpression(reducer, (TemplateExpression) node);
        } else if (node instanceof ThisExpression) {
            return reduceThisExpression(reducer, (ThisExpression) node);
        } else if (node instanceof UpdateExpression) {
            return reduceUpdateExpression(reducer, (UpdateExpression) node);
        } else if (node instanceof YieldExpression) {
            return reduceYieldExpression(reducer, (YieldExpression) node);
        } else if (node instanceof YieldGeneratorExpression) {
            return reduceYieldGeneratorExpression(reducer, (YieldGeneratorExpression) node);
        } else if (node instanceof AwaitExpression) {
            return reduceAwaitExpression(reducer, (AwaitExpression) node);
        } else {
            throw new RuntimeException("Not reached");
        }
    }

    @Nonnull
    public static <State> State reduceExpressionStatement(
      @Nonnull Reducer<State> reducer,
      @Nonnull ExpressionStatement node) {
        return reducer.reduceExpressionStatement(node, reduceExpression(reducer, node.expression));
    }

    @Nonnull
    public static <State> State reduceExpressionSuper(
      @Nonnull Reducer<State> reducer,
      @Nonnull ExpressionSuper node) {
        if (node instanceof Expression) {
            return reduceExpression(reducer, (Expression) node);
        } else if (node instanceof Super) {
            return reduceSuper(reducer, (Super) node);
        } else {
            throw new RuntimeException("Not reached");
        }
    }

    @Nonnull
    public static <State> State reduceExpressionTemplateElement(
      @Nonnull Reducer<State> reducer,
      @Nonnull ExpressionTemplateElement node) {
        if (node instanceof Expression) {
            return reduceExpression(reducer, (Expression) node);
        } else if (node instanceof TemplateElement) {
            return reduceTemplateElement(reducer, (TemplateElement) node);
        } else {
            throw new RuntimeException("Not reached");
        }
    }

    @Nonnull
    public static <State> State reduceForInStatement(
      @Nonnull Reducer<State> reducer,
      @Nonnull ForInStatement node) {
        return reducer.reduceForInStatement(node, reduceVariableDeclarationAssignmentTarget(reducer, node.left), reduceExpression(reducer, node.right), reduceStatement(reducer, node.body));
    }

    @Nonnull
    public static <State> State reduceForOfStatement(
      @Nonnull Reducer<State> reducer,
      @Nonnull ForOfStatement node) {
        return reducer.reduceForOfStatement(node, reduceVariableDeclarationAssignmentTarget(reducer, node.left), reduceExpression(reducer, node.right), reduceStatement(reducer, node.body));
    }

    @Nonnull
    public static <State> State reduceForStatement(
      @Nonnull Reducer<State> reducer,
      @Nonnull ForStatement node) {
        return reducer.reduceForStatement(node, reduceMaybeVariableDeclarationExpression(reducer, node.init), reduceMaybeExpression(reducer, node.test), reduceMaybeExpression(reducer, node.update), reduceStatement(reducer, node.body));
    }

    @Nonnull
    public static <State> State reduceFormalParameters(
      @Nonnull Reducer<State> reducer,
      @Nonnull FormalParameters node) {
        return reducer.reduceFormalParameters(node, reduceListParameter(reducer, node.items), reduceMaybeBinding(reducer, node.rest));
    }

    @Nonnull
    public static <State> State reduceFunctionBody(
      @Nonnull Reducer<State> reducer,
      @Nonnull FunctionBody node) {
        return reducer.reduceFunctionBody(node, reduceListDirective(reducer, node.directives), reduceListStatement(reducer, node.statements));
    }

    @Nonnull
    public static <State> State reduceFunctionBodyExpression(
      @Nonnull Reducer<State> reducer,
      @Nonnull FunctionBodyExpression node) {
        if (node instanceof FunctionBody) {
            return reduceFunctionBody(reducer, (FunctionBody) node);
        } else if (node instanceof Expression) {
            return reduceExpression(reducer, (Expression) node);
        } else {
            throw new RuntimeException("Not reached");
        }
    }

    @Nonnull
    public static <State> State reduceFunctionDeclaration(
      @Nonnull Reducer<State> reducer,
      @Nonnull FunctionDeclaration node) {
        return reducer.reduceFunctionDeclaration(node, reduceBindingIdentifier(reducer, node.name), reduceFormalParameters(reducer, node.params), reduceFunctionBody(reducer, node.body));
    }

    @Nonnull
    public static <State> State reduceFunctionDeclarationClassDeclarationExpression(
      @Nonnull Reducer<State> reducer,
      @Nonnull FunctionDeclarationClassDeclarationExpression node) {
        if (node instanceof FunctionDeclaration) {
            return reduceFunctionDeclaration(reducer, (FunctionDeclaration) node);
        } else if (node instanceof ClassDeclaration) {
            return reduceClassDeclaration(reducer, (ClassDeclaration) node);
        } else if (node instanceof Expression) {
            return reduceExpression(reducer, (Expression) node);
        } else {
            throw new RuntimeException("Not reached");
        }
    }

    @Nonnull
    public static <State> State reduceFunctionDeclarationClassDeclarationVariableDeclaration(
      @Nonnull Reducer<State> reducer,
      @Nonnull FunctionDeclarationClassDeclarationVariableDeclaration node) {
        if (node instanceof FunctionDeclaration) {
            return reduceFunctionDeclaration(reducer, (FunctionDeclaration) node);
        } else if (node instanceof ClassDeclaration) {
            return reduceClassDeclaration(reducer, (ClassDeclaration) node);
        } else if (node instanceof VariableDeclaration) {
            return reduceVariableDeclaration(reducer, (VariableDeclaration) node);
        } else {
            throw new RuntimeException("Not reached");
        }
    }

    @Nonnull
    public static <State> State reduceFunctionExpression(
      @Nonnull Reducer<State> reducer,
      @Nonnull FunctionExpression node) {
        return reducer.reduceFunctionExpression(node, reduceMaybeBindingIdentifier(reducer, node.name), reduceFormalParameters(reducer, node.params), reduceFunctionBody(reducer, node.body));
    }

    @Nonnull
    public static <State> State reduceGetter(
      @Nonnull Reducer<State> reducer,
      @Nonnull Getter node) {
        return reducer.reduceGetter(node, reducePropertyName(reducer, node.name), reduceFunctionBody(reducer, node.body));
    }

    @Nonnull
    public static <State> State reduceIdentifierExpression(
      @Nonnull Reducer<State> reducer,
      @Nonnull IdentifierExpression node) {
        return reducer.reduceIdentifierExpression(node);
    }

    @Nonnull
    public static <State> State reduceIfStatement(
      @Nonnull Reducer<State> reducer,
      @Nonnull IfStatement node) {
        return reducer.reduceIfStatement(node, reduceExpression(reducer, node.test), reduceStatement(reducer, node.consequent), reduceMaybeStatement(reducer, node.alternate));
    }

    @Nonnull
    public static <State> State reduceImport(
      @Nonnull Reducer<State> reducer,
      @Nonnull Import node) {
        return reducer.reduceImport(node, reduceMaybeBindingIdentifier(reducer, node.defaultBinding), reduceListImportSpecifier(reducer, node.namedImports));
    }

    @Nonnull
    public static <State> State reduceImportDeclaration(
      @Nonnull Reducer<State> reducer,
      @Nonnull ImportDeclaration node) {
        if (node instanceof Import) {
            return reduceImport(reducer, (Import) node);
        } else if (node instanceof ImportNamespace) {
            return reduceImportNamespace(reducer, (ImportNamespace) node);
        } else {
            throw new RuntimeException("Not reached");
        }
    }

    @Nonnull
    public static <State> State reduceImportDeclarationExportDeclarationStatement(
      @Nonnull Reducer<State> reducer,
      @Nonnull ImportDeclarationExportDeclarationStatement node) {
        if (node instanceof ImportDeclaration) {
            return reduceImportDeclaration(reducer, (ImportDeclaration) node);
        } else if (node instanceof ExportDeclaration) {
            return reduceExportDeclaration(reducer, (ExportDeclaration) node);
        } else if (node instanceof Statement) {
            return reduceStatement(reducer, (Statement) node);
        } else {
            throw new RuntimeException("Not reached");
        }
    }

    @Nonnull
    public static <State> State reduceImportNamespace(
      @Nonnull Reducer<State> reducer,
      @Nonnull ImportNamespace node) {
        return reducer.reduceImportNamespace(node, reduceMaybeBindingIdentifier(reducer, node.defaultBinding), reduceBindingIdentifier(reducer, node.namespaceBinding));
    }

    @Nonnull
    public static <State> State reduceImportSpecifier(
      @Nonnull Reducer<State> reducer,
      @Nonnull ImportSpecifier node) {
        return reducer.reduceImportSpecifier(node, reduceBindingIdentifier(reducer, node.binding));
    }

    @Nonnull
    public static <State> State reduceIterationStatement(
      @Nonnull Reducer<State> reducer,
      @Nonnull IterationStatement node) {
        if (node instanceof DoWhileStatement) {
            return reduceDoWhileStatement(reducer, (DoWhileStatement) node);
        } else if (node instanceof ForInStatement) {
            return reduceForInStatement(reducer, (ForInStatement) node);
        } else if (node instanceof ForOfStatement) {
            return reduceForOfStatement(reducer, (ForOfStatement) node);
        } else if (node instanceof ForStatement) {
            return reduceForStatement(reducer, (ForStatement) node);
        } else if (node instanceof WhileStatement) {
            return reduceWhileStatement(reducer, (WhileStatement) node);
        } else {
            throw new RuntimeException("Not reached");
        }
    }

    @Nonnull
    public static <State> State reduceLabeledStatement(
      @Nonnull Reducer<State> reducer,
      @Nonnull LabeledStatement node) {
        return reducer.reduceLabeledStatement(node, reduceStatement(reducer, node.body));
    }

    @Nonnull
    public static <State> ImmutableList<State> reduceListAssignmentTargetProperty(
      @Nonnull Reducer<State> reducer,
      @Nonnull ImmutableList<AssignmentTargetProperty> list) {
        return list.map(x -> reduceAssignmentTargetProperty(reducer, x));
      }


    @Nonnull
    public static <State> ImmutableList<State> reduceListBindingProperty(
      @Nonnull Reducer<State> reducer,
      @Nonnull ImmutableList<BindingProperty> list) {
        return list.map(x -> reduceBindingProperty(reducer, x));
      }


    @Nonnull
    public static <State> ImmutableList<State> reduceListClassElement(
      @Nonnull Reducer<State> reducer,
      @Nonnull ImmutableList<ClassElement> list) {
        return list.map(x -> reduceClassElement(reducer, x));
      }


    @Nonnull
    public static <State> ImmutableList<State> reduceListDirective(
      @Nonnull Reducer<State> reducer,
      @Nonnull ImmutableList<Directive> list) {
        return list.map(x -> reduceDirective(reducer, x));
      }


    @Nonnull
    public static <State> ImmutableList<State> reduceListExportFromSpecifier(
      @Nonnull Reducer<State> reducer,
      @Nonnull ImmutableList<ExportFromSpecifier> list) {
        return list.map(x -> reduceExportFromSpecifier(reducer, x));
      }


    @Nonnull
    public static <State> ImmutableList<State> reduceListExportLocalSpecifier(
      @Nonnull Reducer<State> reducer,
      @Nonnull ImmutableList<ExportLocalSpecifier> list) {
        return list.map(x -> reduceExportLocalSpecifier(reducer, x));
      }


    @Nonnull
    public static <State> ImmutableList<State> reduceListExpressionTemplateElement(
      @Nonnull Reducer<State> reducer,
      @Nonnull ImmutableList<ExpressionTemplateElement> list) {
        return list.map(x -> reduceExpressionTemplateElement(reducer, x));
      }


    @Nonnull
    public static <State> ImmutableList<State> reduceListImportDeclarationExportDeclarationStatement(
      @Nonnull Reducer<State> reducer,
      @Nonnull ImmutableList<ImportDeclarationExportDeclarationStatement> list) {
        return list.map(x -> reduceImportDeclarationExportDeclarationStatement(reducer, x));
      }


    @Nonnull
    public static <State> ImmutableList<State> reduceListImportSpecifier(
      @Nonnull Reducer<State> reducer,
      @Nonnull ImmutableList<ImportSpecifier> list) {
        return list.map(x -> reduceImportSpecifier(reducer, x));
      }


    @Nonnull
    public static <State> ImmutableList<Maybe<State>> reduceListMaybeAssignmentTargetAssignmentTargetWithDefault(
      @Nonnull Reducer<State> reducer,
      @Nonnull ImmutableList<Maybe<AssignmentTargetAssignmentTargetWithDefault>> list) {
        return list.map(x -> reduceMaybeAssignmentTargetAssignmentTargetWithDefault(reducer, x));
      }


    @Nonnull
    public static <State> ImmutableList<Maybe<State>> reduceListMaybeBindingBindingWithDefault(
      @Nonnull Reducer<State> reducer,
      @Nonnull ImmutableList<Maybe<BindingBindingWithDefault>> list) {
        return list.map(x -> reduceMaybeBindingBindingWithDefault(reducer, x));
      }


    @Nonnull
    public static <State> ImmutableList<Maybe<State>> reduceListMaybeSpreadElementExpression(
      @Nonnull Reducer<State> reducer,
      @Nonnull ImmutableList<Maybe<SpreadElementExpression>> list) {
        return list.map(x -> reduceMaybeSpreadElementExpression(reducer, x));
      }


    @Nonnull
    public static <State> ImmutableList<State> reduceListObjectProperty(
      @Nonnull Reducer<State> reducer,
      @Nonnull ImmutableList<ObjectProperty> list) {
        return list.map(x -> reduceObjectProperty(reducer, x));
      }


    @Nonnull
    public static <State> ImmutableList<State> reduceListParameter(
      @Nonnull Reducer<State> reducer,
      @Nonnull ImmutableList<Parameter> list) {
        return list.map(x -> reduceParameter(reducer, x));
      }


    @Nonnull
    public static <State> ImmutableList<State> reduceListSpreadElementExpression(
      @Nonnull Reducer<State> reducer,
      @Nonnull ImmutableList<SpreadElementExpression> list) {
        return list.map(x -> reduceSpreadElementExpression(reducer, x));
      }


    @Nonnull
    public static <State> ImmutableList<State> reduceListStatement(
      @Nonnull Reducer<State> reducer,
      @Nonnull ImmutableList<Statement> list) {
        return list.map(x -> reduceStatement(reducer, x));
      }


    @Nonnull
    public static <State> ImmutableList<State> reduceListSwitchCase(
      @Nonnull Reducer<State> reducer,
      @Nonnull ImmutableList<SwitchCase> list) {
        return list.map(x -> reduceSwitchCase(reducer, x));
      }


    @Nonnull
    public static <State> ImmutableList<State> reduceListVariableDeclarator(
      @Nonnull Reducer<State> reducer,
      @Nonnull ImmutableList<VariableDeclarator> list) {
        return list.map(x -> reduceVariableDeclarator(reducer, x));
      }


    @Nonnull
    public static <State> State reduceLiteralBooleanExpression(
      @Nonnull Reducer<State> reducer,
      @Nonnull LiteralBooleanExpression node) {
        return reducer.reduceLiteralBooleanExpression(node);
    }

    @Nonnull
    public static <State> State reduceLiteralInfinityExpression(
      @Nonnull Reducer<State> reducer,
      @Nonnull LiteralInfinityExpression node) {
        return reducer.reduceLiteralInfinityExpression(node);
    }

    @Nonnull
    public static <State> State reduceLiteralNullExpression(
      @Nonnull Reducer<State> reducer,
      @Nonnull LiteralNullExpression node) {
        return reducer.reduceLiteralNullExpression(node);
    }

    @Nonnull
    public static <State> State reduceLiteralNumericExpression(
      @Nonnull Reducer<State> reducer,
      @Nonnull LiteralNumericExpression node) {
        return reducer.reduceLiteralNumericExpression(node);
    }

    @Nonnull
    public static <State> State reduceLiteralRegExpExpression(
      @Nonnull Reducer<State> reducer,
      @Nonnull LiteralRegExpExpression node) {
        return reducer.reduceLiteralRegExpExpression(node);
    }

    @Nonnull
    public static <State> State reduceLiteralStringExpression(
      @Nonnull Reducer<State> reducer,
      @Nonnull LiteralStringExpression node) {
        return reducer.reduceLiteralStringExpression(node);
    }

    @Nonnull
    public static <State> Maybe<State> reduceMaybeAssignmentTarget(
      @Nonnull Reducer<State> reducer,
      @Nonnull Maybe<AssignmentTarget> maybe) {
        return maybe.map(x -> reduceAssignmentTarget(reducer, x));
      }


    @Nonnull
    public static <State> Maybe<State> reduceMaybeAssignmentTargetAssignmentTargetWithDefault(
      @Nonnull Reducer<State> reducer,
      @Nonnull Maybe<AssignmentTargetAssignmentTargetWithDefault> maybe) {
        return maybe.map(x -> reduceAssignmentTargetAssignmentTargetWithDefault(reducer, x));
      }


    @Nonnull
    public static <State> Maybe<State> reduceMaybeBinding(
      @Nonnull Reducer<State> reducer,
      @Nonnull Maybe<Binding> maybe) {
        return maybe.map(x -> reduceBinding(reducer, x));
      }


    @Nonnull
    public static <State> Maybe<State> reduceMaybeBindingBindingWithDefault(
      @Nonnull Reducer<State> reducer,
      @Nonnull Maybe<BindingBindingWithDefault> maybe) {
        return maybe.map(x -> reduceBindingBindingWithDefault(reducer, x));
      }


    @Nonnull
    public static <State> Maybe<State> reduceMaybeBindingIdentifier(
      @Nonnull Reducer<State> reducer,
      @Nonnull Maybe<BindingIdentifier> maybe) {
        return maybe.map(x -> reduceBindingIdentifier(reducer, x));
      }


    @Nonnull
    public static <State> Maybe<State> reduceMaybeCatchClause(
      @Nonnull Reducer<State> reducer,
      @Nonnull Maybe<CatchClause> maybe) {
        return maybe.map(x -> reduceCatchClause(reducer, x));
      }


    @Nonnull
    public static <State> Maybe<State> reduceMaybeExpression(
      @Nonnull Reducer<State> reducer,
      @Nonnull Maybe<Expression> maybe) {
        return maybe.map(x -> reduceExpression(reducer, x));
      }


    @Nonnull
    public static <State> Maybe<State> reduceMaybeSpreadElementExpression(
      @Nonnull Reducer<State> reducer,
      @Nonnull Maybe<SpreadElementExpression> maybe) {
        return maybe.map(x -> reduceSpreadElementExpression(reducer, x));
      }


    @Nonnull
    public static <State> Maybe<State> reduceMaybeStatement(
      @Nonnull Reducer<State> reducer,
      @Nonnull Maybe<Statement> maybe) {
        return maybe.map(x -> reduceStatement(reducer, x));
      }


    @Nonnull
    public static <State> Maybe<State> reduceMaybeVariableDeclarationExpression(
      @Nonnull Reducer<State> reducer,
      @Nonnull Maybe<VariableDeclarationExpression> maybe) {
        return maybe.map(x -> reduceVariableDeclarationExpression(reducer, x));
      }


    @Nonnull
    public static <State> State reduceMemberAssignmentTarget(
      @Nonnull Reducer<State> reducer,
      @Nonnull MemberAssignmentTarget node) {
        if (node instanceof ComputedMemberAssignmentTarget) {
            return reduceComputedMemberAssignmentTarget(reducer, (ComputedMemberAssignmentTarget) node);
        } else if (node instanceof StaticMemberAssignmentTarget) {
            return reduceStaticMemberAssignmentTarget(reducer, (StaticMemberAssignmentTarget) node);
        } else {
            throw new RuntimeException("Not reached");
        }
    }

    @Nonnull
    public static <State> State reduceMemberExpression(
      @Nonnull Reducer<State> reducer,
      @Nonnull MemberExpression node) {
        if (node instanceof ComputedMemberExpression) {
            return reduceComputedMemberExpression(reducer, (ComputedMemberExpression) node);
        } else if (node instanceof StaticMemberExpression) {
            return reduceStaticMemberExpression(reducer, (StaticMemberExpression) node);
        } else {
            throw new RuntimeException("Not reached");
        }
    }

    @Nonnull
    public static <State> State reduceMethod(
      @Nonnull Reducer<State> reducer,
      @Nonnull Method node) {
        return reducer.reduceMethod(node, reducePropertyName(reducer, node.name), reduceFormalParameters(reducer, node.params), reduceFunctionBody(reducer, node.body));
    }

    @Nonnull
    public static <State> State reduceMethodDefinition(
      @Nonnull Reducer<State> reducer,
      @Nonnull MethodDefinition node) {
        if (node instanceof Method) {
            return reduceMethod(reducer, (Method) node);
        } else if (node instanceof Getter) {
            return reduceGetter(reducer, (Getter) node);
        } else if (node instanceof Setter) {
            return reduceSetter(reducer, (Setter) node);
        } else {
            throw new RuntimeException("Not reached");
        }
    }

    @Nonnull
    public static <State> State reduceModule(
      @Nonnull Reducer<State> reducer,
      @Nonnull Module node) {
        return reducer.reduceModule(node, reduceListDirective(reducer, node.directives), reduceListImportDeclarationExportDeclarationStatement(reducer, node.items));
    }

    @Nonnull
    public static <State> State reduceNamedObjectProperty(
      @Nonnull Reducer<State> reducer,
      @Nonnull NamedObjectProperty node) {
        if (node instanceof MethodDefinition) {
            return reduceMethodDefinition(reducer, (MethodDefinition) node);
        } else if (node instanceof DataProperty) {
            return reduceDataProperty(reducer, (DataProperty) node);
        } else {
            throw new RuntimeException("Not reached");
        }
    }

    @Nonnull
    public static <State> State reduceNewExpression(
      @Nonnull Reducer<State> reducer,
      @Nonnull NewExpression node) {
        return reducer.reduceNewExpression(node, reduceExpression(reducer, node.callee), reduceListSpreadElementExpression(reducer, node.arguments));
    }

    @Nonnull
    public static <State> State reduceNewTargetExpression(
      @Nonnull Reducer<State> reducer,
      @Nonnull NewTargetExpression node) {
        return reducer.reduceNewTargetExpression(node);
    }

    @Nonnull
    public static <State> State reduceObjectAssignmentTarget(
      @Nonnull Reducer<State> reducer,
      @Nonnull ObjectAssignmentTarget node) {
        return reducer.reduceObjectAssignmentTarget(node, reduceListAssignmentTargetProperty(reducer, node.properties));
    }

    @Nonnull
    public static <State> State reduceObjectBinding(
      @Nonnull Reducer<State> reducer,
      @Nonnull ObjectBinding node) {
        return reducer.reduceObjectBinding(node, reduceListBindingProperty(reducer, node.properties));
    }

    @Nonnull
    public static <State> State reduceObjectExpression(
      @Nonnull Reducer<State> reducer,
      @Nonnull ObjectExpression node) {
        return reducer.reduceObjectExpression(node, reduceListObjectProperty(reducer, node.properties));
    }

    @Nonnull
    public static <State> State reduceObjectProperty(
      @Nonnull Reducer<State> reducer,
      @Nonnull ObjectProperty node) {
        if (node instanceof NamedObjectProperty) {
            return reduceNamedObjectProperty(reducer, (NamedObjectProperty) node);
        } else if (node instanceof ShorthandProperty) {
            return reduceShorthandProperty(reducer, (ShorthandProperty) node);
        } else {
            throw new RuntimeException("Not reached");
        }
    }

    @Nonnull
    public static <State> State reduceParameter(
      @Nonnull Reducer<State> reducer,
      @Nonnull Parameter node) {
        if (node instanceof Binding) {
            return reduceBinding(reducer, (Binding) node);
        } else if (node instanceof BindingWithDefault) {
            return reduceBindingWithDefault(reducer, (BindingWithDefault) node);
        } else {
            throw new RuntimeException("Not reached");
        }
    }

    @Nonnull
    public static <State> State reduceProgram(
      @Nonnull Reducer<State> reducer,
      @Nonnull Program node) {
        if (node instanceof Module) {
            return reduceModule(reducer, (Module) node);
        } else if (node instanceof Script) {
            return reduceScript(reducer, (Script) node);
        } else {
            throw new RuntimeException("Not reached");
        }
    }

    @Nonnull
    public static <State> State reducePropertyName(
      @Nonnull Reducer<State> reducer,
      @Nonnull PropertyName node) {
        if (node instanceof ComputedPropertyName) {
            return reduceComputedPropertyName(reducer, (ComputedPropertyName) node);
        } else if (node instanceof StaticPropertyName) {
            return reduceStaticPropertyName(reducer, (StaticPropertyName) node);
        } else {
            throw new RuntimeException("Not reached");
        }
    }

    @Nonnull
    public static <State> State reduceReturnStatement(
      @Nonnull Reducer<State> reducer,
      @Nonnull ReturnStatement node) {
        return reducer.reduceReturnStatement(node, reduceMaybeExpression(reducer, node.expression));
    }

    @Nonnull
    public static <State> State reduceScript(
      @Nonnull Reducer<State> reducer,
      @Nonnull Script node) {
        return reducer.reduceScript(node, reduceListDirective(reducer, node.directives), reduceListStatement(reducer, node.statements));
    }

    @Nonnull
    public static <State> State reduceSetter(
      @Nonnull Reducer<State> reducer,
      @Nonnull Setter node) {
        return reducer.reduceSetter(node, reducePropertyName(reducer, node.name), reduceParameter(reducer, node.param), reduceFunctionBody(reducer, node.body));
    }

    @Nonnull
    public static <State> State reduceShorthandProperty(
      @Nonnull Reducer<State> reducer,
      @Nonnull ShorthandProperty node) {
        return reducer.reduceShorthandProperty(node, reduceIdentifierExpression(reducer, node.name));
    }

    @Nonnull
    public static <State> State reduceSimpleAssignmentTarget(
      @Nonnull Reducer<State> reducer,
      @Nonnull SimpleAssignmentTarget node) {
        if (node instanceof AssignmentTargetIdentifier) {
            return reduceAssignmentTargetIdentifier(reducer, (AssignmentTargetIdentifier) node);
        } else if (node instanceof MemberAssignmentTarget) {
            return reduceMemberAssignmentTarget(reducer, (MemberAssignmentTarget) node);
        } else {
            throw new RuntimeException("Not reached");
        }
    }

    @Nonnull
    public static <State> State reduceSpreadElement(
      @Nonnull Reducer<State> reducer,
      @Nonnull SpreadElement node) {
        return reducer.reduceSpreadElement(node, reduceExpression(reducer, node.expression));
    }

    @Nonnull
    public static <State> State reduceSpreadElementExpression(
      @Nonnull Reducer<State> reducer,
      @Nonnull SpreadElementExpression node) {
        if (node instanceof SpreadElement) {
            return reduceSpreadElement(reducer, (SpreadElement) node);
        } else if (node instanceof Expression) {
            return reduceExpression(reducer, (Expression) node);
        } else {
            throw new RuntimeException("Not reached");
        }
    }

    @Nonnull
    public static <State> State reduceStatement(
      @Nonnull Reducer<State> reducer,
      @Nonnull Statement node) {
        if (node instanceof IterationStatement) {
            return reduceIterationStatement(reducer, (IterationStatement) node);
        } else if (node instanceof ClassDeclaration) {
            return reduceClassDeclaration(reducer, (ClassDeclaration) node);
        } else if (node instanceof BlockStatement) {
            return reduceBlockStatement(reducer, (BlockStatement) node);
        } else if (node instanceof BreakStatement) {
            return reduceBreakStatement(reducer, (BreakStatement) node);
        } else if (node instanceof ContinueStatement) {
            return reduceContinueStatement(reducer, (ContinueStatement) node);
        } else if (node instanceof DebuggerStatement) {
            return reduceDebuggerStatement(reducer, (DebuggerStatement) node);
        } else if (node instanceof EmptyStatement) {
            return reduceEmptyStatement(reducer, (EmptyStatement) node);
        } else if (node instanceof ExpressionStatement) {
            return reduceExpressionStatement(reducer, (ExpressionStatement) node);
        } else if (node instanceof IfStatement) {
            return reduceIfStatement(reducer, (IfStatement) node);
        } else if (node instanceof LabeledStatement) {
            return reduceLabeledStatement(reducer, (LabeledStatement) node);
        } else if (node instanceof ReturnStatement) {
            return reduceReturnStatement(reducer, (ReturnStatement) node);
        } else if (node instanceof SwitchStatement) {
            return reduceSwitchStatement(reducer, (SwitchStatement) node);
        } else if (node instanceof SwitchStatementWithDefault) {
            return reduceSwitchStatementWithDefault(reducer, (SwitchStatementWithDefault) node);
        } else if (node instanceof ThrowStatement) {
            return reduceThrowStatement(reducer, (ThrowStatement) node);
        } else if (node instanceof TryCatchStatement) {
            return reduceTryCatchStatement(reducer, (TryCatchStatement) node);
        } else if (node instanceof TryFinallyStatement) {
            return reduceTryFinallyStatement(reducer, (TryFinallyStatement) node);
        } else if (node instanceof VariableDeclarationStatement) {
            return reduceVariableDeclarationStatement(reducer, (VariableDeclarationStatement) node);
        } else if (node instanceof WithStatement) {
            return reduceWithStatement(reducer, (WithStatement) node);
        } else if (node instanceof FunctionDeclaration) {
            return reduceFunctionDeclaration(reducer, (FunctionDeclaration) node);
        } else {
            throw new RuntimeException("Not reached");
        }
    }

    @Nonnull
    public static <State> State reduceStaticMemberAssignmentTarget(
      @Nonnull Reducer<State> reducer,
      @Nonnull StaticMemberAssignmentTarget node) {
        return reducer.reduceStaticMemberAssignmentTarget(node, reduceExpressionSuper(reducer, node.object));
    }

    @Nonnull
    public static <State> State reduceStaticMemberExpression(
      @Nonnull Reducer<State> reducer,
      @Nonnull StaticMemberExpression node) {
        return reducer.reduceStaticMemberExpression(node, reduceExpressionSuper(reducer, node.object));
    }

    @Nonnull
    public static <State> State reduceStaticPropertyName(
      @Nonnull Reducer<State> reducer,
      @Nonnull StaticPropertyName node) {
        return reducer.reduceStaticPropertyName(node);
    }

    @Nonnull
    public static <State> State reduceSuper(
      @Nonnull Reducer<State> reducer,
      @Nonnull Super node) {
        return reducer.reduceSuper(node);
    }

    @Nonnull
    public static <State> State reduceSwitchCase(
      @Nonnull Reducer<State> reducer,
      @Nonnull SwitchCase node) {
        return reducer.reduceSwitchCase(node, reduceExpression(reducer, node.test), reduceListStatement(reducer, node.consequent));
    }

    @Nonnull
    public static <State> State reduceSwitchDefault(
      @Nonnull Reducer<State> reducer,
      @Nonnull SwitchDefault node) {
        return reducer.reduceSwitchDefault(node, reduceListStatement(reducer, node.consequent));
    }

    @Nonnull
    public static <State> State reduceSwitchStatement(
      @Nonnull Reducer<State> reducer,
      @Nonnull SwitchStatement node) {
        return reducer.reduceSwitchStatement(node, reduceExpression(reducer, node.discriminant), reduceListSwitchCase(reducer, node.cases));
    }

    @Nonnull
    public static <State> State reduceSwitchStatementWithDefault(
      @Nonnull Reducer<State> reducer,
      @Nonnull SwitchStatementWithDefault node) {
        return reducer.reduceSwitchStatementWithDefault(node, reduceExpression(reducer, node.discriminant), reduceListSwitchCase(reducer, node.preDefaultCases), reduceSwitchDefault(reducer, node.defaultCase), reduceListSwitchCase(reducer, node.postDefaultCases));
    }

    @Nonnull
    public static <State> State reduceTemplateElement(
      @Nonnull Reducer<State> reducer,
      @Nonnull TemplateElement node) {
        return reducer.reduceTemplateElement(node);
    }

    @Nonnull
    public static <State> State reduceTemplateExpression(
      @Nonnull Reducer<State> reducer,
      @Nonnull TemplateExpression node) {
        return reducer.reduceTemplateExpression(node, reduceMaybeExpression(reducer, node.tag), reduceListExpressionTemplateElement(reducer, node.elements));
    }

    @Nonnull
    public static <State> State reduceThisExpression(
      @Nonnull Reducer<State> reducer,
      @Nonnull ThisExpression node) {
        return reducer.reduceThisExpression(node);
    }

    @Nonnull
    public static <State> State reduceThrowStatement(
      @Nonnull Reducer<State> reducer,
      @Nonnull ThrowStatement node) {
        return reducer.reduceThrowStatement(node, reduceExpression(reducer, node.expression));
    }

    @Nonnull
    public static <State> State reduceTryCatchStatement(
      @Nonnull Reducer<State> reducer,
      @Nonnull TryCatchStatement node) {
        return reducer.reduceTryCatchStatement(node, reduceBlock(reducer, node.body), reduceCatchClause(reducer, node.catchClause));
    }

    @Nonnull
    public static <State> State reduceTryFinallyStatement(
      @Nonnull Reducer<State> reducer,
      @Nonnull TryFinallyStatement node) {
        return reducer.reduceTryFinallyStatement(node, reduceBlock(reducer, node.body), reduceMaybeCatchClause(reducer, node.catchClause), reduceBlock(reducer, node.finalizer));
    }

    @Nonnull
    public static <State> State reduceUnaryExpression(
      @Nonnull Reducer<State> reducer,
      @Nonnull UnaryExpression node) {
        return reducer.reduceUnaryExpression(node, reduceExpression(reducer, node.operand));
    }

    @Nonnull
    public static <State> State reduceUpdateExpression(
      @Nonnull Reducer<State> reducer,
      @Nonnull UpdateExpression node) {
        return reducer.reduceUpdateExpression(node, reduceSimpleAssignmentTarget(reducer, node.operand));
    }

    @Nonnull
    public static <State> State reduceVariableDeclaration(
      @Nonnull Reducer<State> reducer,
      @Nonnull VariableDeclaration node) {
        return reducer.reduceVariableDeclaration(node, reduceListVariableDeclarator(reducer, node.declarators));
    }

    @Nonnull
    public static <State> State reduceVariableDeclarationAssignmentTarget(
      @Nonnull Reducer<State> reducer,
      @Nonnull VariableDeclarationAssignmentTarget node) {
        if (node instanceof VariableDeclaration) {
            return reduceVariableDeclaration(reducer, (VariableDeclaration) node);
        } else if (node instanceof AssignmentTarget) {
            return reduceAssignmentTarget(reducer, (AssignmentTarget) node);
        } else {
            throw new RuntimeException("Not reached");
        }
    }

    @Nonnull
    public static <State> State reduceVariableDeclarationExpression(
      @Nonnull Reducer<State> reducer,
      @Nonnull VariableDeclarationExpression node) {
        if (node instanceof VariableDeclaration) {
            return reduceVariableDeclaration(reducer, (VariableDeclaration) node);
        } else if (node instanceof Expression) {
            return reduceExpression(reducer, (Expression) node);
        } else {
            throw new RuntimeException("Not reached");
        }
    }

    @Nonnull
    public static <State> State reduceVariableDeclarationStatement(
      @Nonnull Reducer<State> reducer,
      @Nonnull VariableDeclarationStatement node) {
        return reducer.reduceVariableDeclarationStatement(node, reduceVariableDeclaration(reducer, node.declaration));
    }

    @Nonnull
    public static <State> State reduceVariableDeclarator(
      @Nonnull Reducer<State> reducer,
      @Nonnull VariableDeclarator node) {
        return reducer.reduceVariableDeclarator(node, reduceBinding(reducer, node.binding), reduceMaybeExpression(reducer, node.init));
    }

    @Nonnull
    public static <State> State reduceWhileStatement(
      @Nonnull Reducer<State> reducer,
      @Nonnull WhileStatement node) {
        return reducer.reduceWhileStatement(node, reduceExpression(reducer, node.test), reduceStatement(reducer, node.body));
    }

    @Nonnull
    public static <State> State reduceWithStatement(
      @Nonnull Reducer<State> reducer,
      @Nonnull WithStatement node) {
        return reducer.reduceWithStatement(node, reduceExpression(reducer, node.object), reduceStatement(reducer, node.body));
    }

    @Nonnull
    public static <State> State reduceYieldExpression(
      @Nonnull Reducer<State> reducer,
      @Nonnull YieldExpression node) {
        return reducer.reduceYieldExpression(node, reduceMaybeExpression(reducer, node.expression));
    }

    @Nonnull
    public static <State> State reduceYieldGeneratorExpression(
      @Nonnull Reducer<State> reducer,
      @Nonnull YieldGeneratorExpression node) {
        return reducer.reduceYieldGeneratorExpression(node, reduceExpression(reducer, node.expression));
    }
}
