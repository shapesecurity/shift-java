// Generated by reducer-clone.js
/**
 * Copyright 2018 Shape Security, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package com.shapesecurity.shift.es2017.reducer;

import com.shapesecurity.functional.data.ImmutableList;
import com.shapesecurity.functional.data.Maybe;
import com.shapesecurity.shift.es2017.ast.*;
import javax.annotation.Nonnull;

public class ReconstructingReducer implements Reducer<Node> {
    @Nonnull
    @Override
    public AssignmentTarget reduceArrayAssignmentTarget(
            @Nonnull ArrayAssignmentTarget node,
            @Nonnull ImmutableList<Maybe<Node>> elements,
            @Nonnull Maybe<Node> rest) {
        return new ArrayAssignmentTarget(elements.map(x -> x.map(y -> (AssignmentTargetAssignmentTargetWithDefault) y)), rest.map(x -> (AssignmentTarget) x));
    }

    @Nonnull
    @Override
    public Binding reduceArrayBinding(
            @Nonnull ArrayBinding node,
            @Nonnull ImmutableList<Maybe<Node>> elements,
            @Nonnull Maybe<Node> rest) {
        return new ArrayBinding(elements.map(x -> x.map(y -> (BindingBindingWithDefault) y)), rest.map(x -> (Binding) x));
    }

    @Nonnull
    @Override
    public Expression reduceArrayExpression(
            @Nonnull ArrayExpression node,
            @Nonnull ImmutableList<Maybe<Node>> elements) {
        return new ArrayExpression(elements.map(x -> x.map(y -> (SpreadElementExpression) y)));
    }

    @Nonnull
    @Override
    public Expression reduceArrowExpression(
            @Nonnull ArrowExpression node,
            @Nonnull Node params,
            @Nonnull Node body) {
        return new ArrowExpression(node.isAsync, (FormalParameters) params, (FunctionBodyExpression) body);
    }

    @Nonnull
    @Override
    public Expression reduceAssignmentExpression(
            @Nonnull AssignmentExpression node,
            @Nonnull Node binding,
            @Nonnull Node expression) {
        return new AssignmentExpression((AssignmentTarget) binding, (Expression) expression);
    }

    @Nonnull
    @Override
    public AssignmentTargetIdentifier reduceAssignmentTargetIdentifier(@Nonnull AssignmentTargetIdentifier node) {
        return new AssignmentTargetIdentifier(node.name);
    }

    @Nonnull
    @Override
    public AssignmentTargetProperty reduceAssignmentTargetPropertyIdentifier(
            @Nonnull AssignmentTargetPropertyIdentifier node,
            @Nonnull Node binding,
            @Nonnull Maybe<Node> init) {
        return new AssignmentTargetPropertyIdentifier((AssignmentTargetIdentifier) binding, init.map(x -> (Expression) x));
    }

    @Nonnull
    @Override
    public AssignmentTargetProperty reduceAssignmentTargetPropertyProperty(
            @Nonnull AssignmentTargetPropertyProperty node,
            @Nonnull Node name,
            @Nonnull Node binding) {
        return new AssignmentTargetPropertyProperty((PropertyName) name, (AssignmentTargetAssignmentTargetWithDefault) binding);
    }

    @Nonnull
    @Override
    public AssignmentTargetAssignmentTargetWithDefault reduceAssignmentTargetWithDefault(
            @Nonnull AssignmentTargetWithDefault node,
            @Nonnull Node binding,
            @Nonnull Node init) {
        return new AssignmentTargetWithDefault((AssignmentTarget) binding, (Expression) init);
    }

    @Nonnull
    @Override
    public Expression reduceAwaitExpression(
            @Nonnull AwaitExpression node,
            @Nonnull Node expression) {
        return new AwaitExpression((Expression) expression);
    }

    @Nonnull
    @Override
    public Expression reduceBinaryExpression(
            @Nonnull BinaryExpression node,
            @Nonnull Node left,
            @Nonnull Node right) {
        return new BinaryExpression((Expression) left, node.operator, (Expression) right);
    }

    @Nonnull
    @Override
    public BindingIdentifier reduceBindingIdentifier(@Nonnull BindingIdentifier node) {
        return new BindingIdentifier(node.name);
    }

    @Nonnull
    @Override
    public BindingProperty reduceBindingPropertyIdentifier(
            @Nonnull BindingPropertyIdentifier node,
            @Nonnull Node binding,
            @Nonnull Maybe<Node> init) {
        return new BindingPropertyIdentifier((BindingIdentifier) binding, init.map(x -> (Expression) x));
    }

    @Nonnull
    @Override
    public BindingProperty reduceBindingPropertyProperty(
            @Nonnull BindingPropertyProperty node,
            @Nonnull Node name,
            @Nonnull Node binding) {
        return new BindingPropertyProperty((PropertyName) name, (BindingBindingWithDefault) binding);
    }

    @Nonnull
    @Override
    public BindingWithDefault reduceBindingWithDefault(
            @Nonnull BindingWithDefault node,
            @Nonnull Node binding,
            @Nonnull Node init) {
        return new BindingWithDefault((Binding) binding, (Expression) init);
    }

    @Nonnull
    @Override
    public Block reduceBlock(
            @Nonnull Block node,
            @Nonnull ImmutableList<Node> statements) {
        return new Block(statements.map(x -> (Statement) x));
    }

    @Nonnull
    @Override
    public Statement reduceBlockStatement(
            @Nonnull BlockStatement node,
            @Nonnull Node block) {
        return new BlockStatement((Block) block);
    }

    @Nonnull
    @Override
    public Statement reduceBreakStatement(@Nonnull BreakStatement node) {
        return new BreakStatement(node.label);
    }

    @Nonnull
    @Override
    public Expression reduceCallExpression(
            @Nonnull CallExpression node,
            @Nonnull Node callee,
            @Nonnull ImmutableList<Node> arguments) {
        return new CallExpression((ExpressionSuper) callee, arguments.map(x -> (SpreadElementExpression) x));
    }

    @Nonnull
    @Override
    public CatchClause reduceCatchClause(
            @Nonnull CatchClause node,
            @Nonnull Node binding,
            @Nonnull Node body) {
        return new CatchClause((Binding) binding, (Block) body);
    }

    @Nonnull
    @Override
    public ClassDeclaration reduceClassDeclaration(
            @Nonnull ClassDeclaration node,
            @Nonnull Node name,
            @Nonnull Maybe<Node> _super,
            @Nonnull ImmutableList<Node> elements) {
        return new ClassDeclaration((BindingIdentifier) name, _super.map(x -> (Expression) x), elements.map(x -> (ClassElement) x));
    }

    @Nonnull
    @Override
    public ClassElement reduceClassElement(
            @Nonnull ClassElement node,
            @Nonnull Node method) {
        return new ClassElement(node.isStatic, (MethodDefinition) method);
    }

    @Nonnull
    @Override
    public ClassExpression reduceClassExpression(
            @Nonnull ClassExpression node,
            @Nonnull Maybe<Node> name,
            @Nonnull Maybe<Node> _super,
            @Nonnull ImmutableList<Node> elements) {
        return new ClassExpression(name.map(x -> (BindingIdentifier) x), _super.map(x -> (Expression) x), elements.map(x -> (ClassElement) x));
    }

    @Nonnull
    @Override
    public Expression reduceCompoundAssignmentExpression(
            @Nonnull CompoundAssignmentExpression node,
            @Nonnull Node binding,
            @Nonnull Node expression) {
        return new CompoundAssignmentExpression((SimpleAssignmentTarget) binding, node.operator, (Expression) expression);
    }

    @Nonnull
    @Override
    public SimpleAssignmentTarget reduceComputedMemberAssignmentTarget(
            @Nonnull ComputedMemberAssignmentTarget node,
            @Nonnull Node object,
            @Nonnull Node expression) {
        return new ComputedMemberAssignmentTarget((ExpressionSuper) object, (Expression) expression);
    }

    @Nonnull
    @Override
    public Expression reduceComputedMemberExpression(
            @Nonnull ComputedMemberExpression node,
            @Nonnull Node object,
            @Nonnull Node expression) {
        return new ComputedMemberExpression((ExpressionSuper) object, (Expression) expression);
    }

    @Nonnull
    @Override
    public PropertyName reduceComputedPropertyName(
            @Nonnull ComputedPropertyName node,
            @Nonnull Node expression) {
        return new ComputedPropertyName((Expression) expression);
    }

    @Nonnull
    @Override
    public Expression reduceConditionalExpression(
            @Nonnull ConditionalExpression node,
            @Nonnull Node test,
            @Nonnull Node consequent,
            @Nonnull Node alternate) {
        return new ConditionalExpression((Expression) test, (Expression) consequent, (Expression) alternate);
    }

    @Nonnull
    @Override
    public Statement reduceContinueStatement(@Nonnull ContinueStatement node) {
        return new ContinueStatement(node.label);
    }

    @Nonnull
    @Override
    public ObjectProperty reduceDataProperty(
            @Nonnull DataProperty node,
            @Nonnull Node name,
            @Nonnull Node expression) {
        return new DataProperty((PropertyName) name, (Expression) expression);
    }

    @Nonnull
    @Override
    public Statement reduceDebuggerStatement(@Nonnull DebuggerStatement node) {
        return new DebuggerStatement();
    }

    @Nonnull
    @Override
    public Directive reduceDirective(@Nonnull Directive node) {
        return new Directive(node.rawValue);
    }

    @Nonnull
    @Override
    public Statement reduceDoWhileStatement(
            @Nonnull DoWhileStatement node,
            @Nonnull Node body,
            @Nonnull Node test) {
        return new DoWhileStatement((Statement) body, (Expression) test);
    }

    @Nonnull
    @Override
    public Statement reduceEmptyStatement(@Nonnull EmptyStatement node) {
        return new EmptyStatement();
    }

    @Nonnull
    @Override
    public ImportDeclarationExportDeclarationStatement reduceExport(
            @Nonnull Export node,
            @Nonnull Node declaration) {
        return new Export((FunctionDeclarationClassDeclarationVariableDeclaration) declaration);
    }

    @Nonnull
    @Override
    public ImportDeclarationExportDeclarationStatement reduceExportAllFrom(@Nonnull ExportAllFrom node) {
        return new ExportAllFrom(node.moduleSpecifier);
    }

    @Nonnull
    @Override
    public ImportDeclarationExportDeclarationStatement reduceExportDefault(
            @Nonnull ExportDefault node,
            @Nonnull Node body) {
        return new ExportDefault((FunctionDeclarationClassDeclarationExpression) body);
    }

    @Nonnull
    @Override
    public ImportDeclarationExportDeclarationStatement reduceExportFrom(
            @Nonnull ExportFrom node,
            @Nonnull ImmutableList<Node> namedExports) {
        return new ExportFrom(namedExports.map(x -> (ExportFromSpecifier) x), node.moduleSpecifier);
    }

    @Nonnull
    @Override
    public ExportFromSpecifier reduceExportFromSpecifier(@Nonnull ExportFromSpecifier node) {
        return new ExportFromSpecifier(node.name, node.exportedName);
    }

    @Nonnull
    @Override
    public ExportLocalSpecifier reduceExportLocalSpecifier(
            @Nonnull ExportLocalSpecifier node,
            @Nonnull Node name) {
        return new ExportLocalSpecifier((IdentifierExpression) name, node.exportedName);
    }

    @Nonnull
    @Override
    public ImportDeclarationExportDeclarationStatement reduceExportLocals(
            @Nonnull ExportLocals node,
            @Nonnull ImmutableList<Node> namedExports) {
        return new ExportLocals(namedExports.map(x -> (ExportLocalSpecifier) x));
    }

    @Nonnull
    @Override
    public Statement reduceExpressionStatement(
            @Nonnull ExpressionStatement node,
            @Nonnull Node expression) {
        return new ExpressionStatement((Expression) expression);
    }

    @Nonnull
    @Override
    public Statement reduceForInStatement(
            @Nonnull ForInStatement node,
            @Nonnull Node left,
            @Nonnull Node right,
            @Nonnull Node body) {
        return new ForInStatement((VariableDeclarationAssignmentTarget) left, (Expression) right, (Statement) body);
    }

    @Nonnull
    @Override
    public Statement reduceForOfStatement(
            @Nonnull ForOfStatement node,
            @Nonnull Node left,
            @Nonnull Node right,
            @Nonnull Node body) {
        return new ForOfStatement((VariableDeclarationAssignmentTarget) left, (Expression) right, (Statement) body);
    }

    @Nonnull
    @Override
    public Statement reduceForStatement(
            @Nonnull ForStatement node,
            @Nonnull Maybe<Node> init,
            @Nonnull Maybe<Node> test,
            @Nonnull Maybe<Node> update,
            @Nonnull Node body) {
        return new ForStatement(init.map(x -> (VariableDeclarationExpression) x), test.map(x -> (Expression) x), update.map(x -> (Expression) x), (Statement) body);
    }

    @Nonnull
    @Override
    public FormalParameters reduceFormalParameters(
            @Nonnull FormalParameters node,
            @Nonnull ImmutableList<Node> items,
            @Nonnull Maybe<Node> rest) {
        return new FormalParameters(items.map(x -> (Parameter) x), rest.map(x -> (Binding) x));
    }

    @Nonnull
    @Override
    public FunctionBody reduceFunctionBody(
            @Nonnull FunctionBody node,
            @Nonnull ImmutableList<Node> directives,
            @Nonnull ImmutableList<Node> statements) {
        return new FunctionBody(directives.map(x -> (Directive) x), statements.map(x -> (Statement) x));
    }

    @Nonnull
    @Override
    public FunctionDeclaration reduceFunctionDeclaration(
            @Nonnull FunctionDeclaration node,
            @Nonnull Node name,
            @Nonnull Node params,
            @Nonnull Node body) {
        return new FunctionDeclaration(node.isAsync, node.isGenerator, (BindingIdentifier) name, (FormalParameters) params, (FunctionBody) body);
    }

    @Nonnull
    @Override
    public FunctionExpression reduceFunctionExpression(
            @Nonnull FunctionExpression node,
            @Nonnull Maybe<Node> name,
            @Nonnull Node params,
            @Nonnull Node body) {
        return new FunctionExpression(node.isAsync, node.isGenerator, name.map(x -> (BindingIdentifier) x), (FormalParameters) params, (FunctionBody) body);
    }

    @Nonnull
    @Override
    public MethodDefinition reduceGetter(
            @Nonnull Getter node,
            @Nonnull Node name,
            @Nonnull Node body) {
        return new Getter((PropertyName) name, (FunctionBody) body);
    }

    @Nonnull
    @Override
    public IdentifierExpression reduceIdentifierExpression(@Nonnull IdentifierExpression node) {
        return new IdentifierExpression(node.name);
    }

    @Nonnull
    @Override
    public Statement reduceIfStatement(
            @Nonnull IfStatement node,
            @Nonnull Node test,
            @Nonnull Node consequent,
            @Nonnull Maybe<Node> alternate) {
        return new IfStatement((Expression) test, (Statement) consequent, alternate.map(x -> (Statement) x));
    }

    @Nonnull
    @Override
    public ImportDeclarationExportDeclarationStatement reduceImport(
            @Nonnull Import node,
            @Nonnull Maybe<Node> defaultBinding,
            @Nonnull ImmutableList<Node> namedImports) {
        return new Import(defaultBinding.map(x -> (BindingIdentifier) x), namedImports.map(x -> (ImportSpecifier) x), node.moduleSpecifier);
    }

    @Nonnull
    @Override
    public ImportDeclarationExportDeclarationStatement reduceImportNamespace(
            @Nonnull ImportNamespace node,
            @Nonnull Maybe<Node> defaultBinding,
            @Nonnull Node namespaceBinding) {
        return new ImportNamespace(defaultBinding.map(x -> (BindingIdentifier) x), (BindingIdentifier) namespaceBinding, node.moduleSpecifier);
    }

    @Nonnull
    @Override
    public ImportSpecifier reduceImportSpecifier(
            @Nonnull ImportSpecifier node,
            @Nonnull Node binding) {
        return new ImportSpecifier(node.name, (BindingIdentifier) binding);
    }

    @Nonnull
    @Override
    public Statement reduceLabeledStatement(
            @Nonnull LabeledStatement node,
            @Nonnull Node body) {
        return new LabeledStatement(node.label, (Statement) body);
    }

    @Nonnull
    @Override
    public Expression reduceLiteralBooleanExpression(@Nonnull LiteralBooleanExpression node) {
        return new LiteralBooleanExpression(node.value);
    }

    @Nonnull
    @Override
    public Expression reduceLiteralInfinityExpression(@Nonnull LiteralInfinityExpression node) {
        return new LiteralInfinityExpression();
    }

    @Nonnull
    @Override
    public Expression reduceLiteralNullExpression(@Nonnull LiteralNullExpression node) {
        return new LiteralNullExpression();
    }

    @Nonnull
    @Override
    public Expression reduceLiteralNumericExpression(@Nonnull LiteralNumericExpression node) {
        return new LiteralNumericExpression(node.value);
    }

    @Nonnull
    @Override
    public Expression reduceLiteralRegExpExpression(@Nonnull LiteralRegExpExpression node) {
        return new LiteralRegExpExpression(node.pattern, node.global, node.ignoreCase, node.multiLine, node.sticky, node.unicode);
    }

    @Nonnull
    @Override
    public Expression reduceLiteralStringExpression(@Nonnull LiteralStringExpression node) {
        return new LiteralStringExpression(node.value);
    }

    @Nonnull
    @Override
    public MethodDefinition reduceMethod(
            @Nonnull Method node,
            @Nonnull Node name,
            @Nonnull Node params,
            @Nonnull Node body) {
        return new Method(node.isAsync, node.isGenerator, (PropertyName) name, (FormalParameters) params, (FunctionBody) body);
    }

    @Nonnull
    @Override
    public Program reduceModule(
            @Nonnull Module node,
            @Nonnull ImmutableList<Node> directives,
            @Nonnull ImmutableList<Node> items) {
        return new Module(directives.map(x -> (Directive) x), items.map(x -> (ImportDeclarationExportDeclarationStatement) x));
    }

    @Nonnull
    @Override
    public Expression reduceNewExpression(
            @Nonnull NewExpression node,
            @Nonnull Node callee,
            @Nonnull ImmutableList<Node> arguments) {
        return new NewExpression((Expression) callee, arguments.map(x -> (SpreadElementExpression) x));
    }

    @Nonnull
    @Override
    public Expression reduceNewTargetExpression(@Nonnull NewTargetExpression node) {
        return new NewTargetExpression();
    }

    @Nonnull
    @Override
    public AssignmentTarget reduceObjectAssignmentTarget(
            @Nonnull ObjectAssignmentTarget node,
            @Nonnull ImmutableList<Node> properties) {
        return new ObjectAssignmentTarget(properties.map(x -> (AssignmentTargetProperty) x));
    }

    @Nonnull
    @Override
    public Binding reduceObjectBinding(
            @Nonnull ObjectBinding node,
            @Nonnull ImmutableList<Node> properties) {
        return new ObjectBinding(properties.map(x -> (BindingProperty) x));
    }

    @Nonnull
    @Override
    public Expression reduceObjectExpression(
            @Nonnull ObjectExpression node,
            @Nonnull ImmutableList<Node> properties) {
        return new ObjectExpression(properties.map(x -> (ObjectProperty) x));
    }

    @Nonnull
    @Override
    public Statement reduceReturnStatement(
            @Nonnull ReturnStatement node,
            @Nonnull Maybe<Node> expression) {
        return new ReturnStatement(expression.map(x -> (Expression) x));
    }

    @Nonnull
    @Override
    public Program reduceScript(
            @Nonnull Script node,
            @Nonnull ImmutableList<Node> directives,
            @Nonnull ImmutableList<Node> statements) {
        return new Script(directives.map(x -> (Directive) x), statements.map(x -> (Statement) x));
    }

    @Nonnull
    @Override
    public MethodDefinition reduceSetter(
            @Nonnull Setter node,
            @Nonnull Node name,
            @Nonnull Node param,
            @Nonnull Node body) {
        return new Setter((PropertyName) name, (Parameter) param, (FunctionBody) body);
    }

    @Nonnull
    @Override
    public ObjectProperty reduceShorthandProperty(
            @Nonnull ShorthandProperty node,
            @Nonnull Node name) {
        return new ShorthandProperty((IdentifierExpression) name);
    }

    @Nonnull
    @Override
    public SpreadElementExpression reduceSpreadElement(
            @Nonnull SpreadElement node,
            @Nonnull Node expression) {
        return new SpreadElement((Expression) expression);
    }

    @Nonnull
    @Override
    public SimpleAssignmentTarget reduceStaticMemberAssignmentTarget(
            @Nonnull StaticMemberAssignmentTarget node,
            @Nonnull Node object) {
        return new StaticMemberAssignmentTarget((ExpressionSuper) object, node.property);
    }

    @Nonnull
    @Override
    public Expression reduceStaticMemberExpression(
            @Nonnull StaticMemberExpression node,
            @Nonnull Node object) {
        return new StaticMemberExpression((ExpressionSuper) object, node.property);
    }

    @Nonnull
    @Override
    public PropertyName reduceStaticPropertyName(@Nonnull StaticPropertyName node) {
        return new StaticPropertyName(node.value);
    }

    @Nonnull
    @Override
    public ExpressionSuper reduceSuper(@Nonnull Super node) {
        return new Super();
    }

    @Nonnull
    @Override
    public SwitchCase reduceSwitchCase(
            @Nonnull SwitchCase node,
            @Nonnull Node test,
            @Nonnull ImmutableList<Node> consequent) {
        return new SwitchCase((Expression) test, consequent.map(x -> (Statement) x));
    }

    @Nonnull
    @Override
    public SwitchDefault reduceSwitchDefault(
            @Nonnull SwitchDefault node,
            @Nonnull ImmutableList<Node> consequent) {
        return new SwitchDefault(consequent.map(x -> (Statement) x));
    }

    @Nonnull
    @Override
    public Statement reduceSwitchStatement(
            @Nonnull SwitchStatement node,
            @Nonnull Node discriminant,
            @Nonnull ImmutableList<Node> cases) {
        return new SwitchStatement((Expression) discriminant, cases.map(x -> (SwitchCase) x));
    }

    @Nonnull
    @Override
    public Statement reduceSwitchStatementWithDefault(
            @Nonnull SwitchStatementWithDefault node,
            @Nonnull Node discriminant,
            @Nonnull ImmutableList<Node> preDefaultCases,
            @Nonnull Node defaultCase,
            @Nonnull ImmutableList<Node> postDefaultCases) {
        return new SwitchStatementWithDefault((Expression) discriminant, preDefaultCases.map(x -> (SwitchCase) x), (SwitchDefault) defaultCase, postDefaultCases.map(x -> (SwitchCase) x));
    }

    @Nonnull
    @Override
    public ExpressionTemplateElement reduceTemplateElement(@Nonnull TemplateElement node) {
        return new TemplateElement(node.rawValue);
    }

    @Nonnull
    @Override
    public Expression reduceTemplateExpression(
            @Nonnull TemplateExpression node,
            @Nonnull Maybe<Node> tag,
            @Nonnull ImmutableList<Node> elements) {
        return new TemplateExpression(tag.map(x -> (Expression) x), elements.map(x -> (ExpressionTemplateElement) x));
    }

    @Nonnull
    @Override
    public Expression reduceThisExpression(@Nonnull ThisExpression node) {
        return new ThisExpression();
    }

    @Nonnull
    @Override
    public Statement reduceThrowStatement(
            @Nonnull ThrowStatement node,
            @Nonnull Node expression) {
        return new ThrowStatement((Expression) expression);
    }

    @Nonnull
    @Override
    public Statement reduceTryCatchStatement(
            @Nonnull TryCatchStatement node,
            @Nonnull Node body,
            @Nonnull Node catchClause) {
        return new TryCatchStatement((Block) body, (CatchClause) catchClause);
    }

    @Nonnull
    @Override
    public Statement reduceTryFinallyStatement(
            @Nonnull TryFinallyStatement node,
            @Nonnull Node body,
            @Nonnull Maybe<Node> catchClause,
            @Nonnull Node finalizer) {
        return new TryFinallyStatement((Block) body, catchClause.map(x -> (CatchClause) x), (Block) finalizer);
    }

    @Nonnull
    @Override
    public Expression reduceUnaryExpression(
            @Nonnull UnaryExpression node,
            @Nonnull Node operand) {
        return new UnaryExpression(node.operator, (Expression) operand);
    }

    @Nonnull
    @Override
    public Expression reduceUpdateExpression(
            @Nonnull UpdateExpression node,
            @Nonnull Node operand) {
        return new UpdateExpression(node.isPrefix, node.operator, (SimpleAssignmentTarget) operand);
    }

    @Nonnull
    @Override
    public VariableDeclaration reduceVariableDeclaration(
            @Nonnull VariableDeclaration node,
            @Nonnull ImmutableList<Node> declarators) {
        return new VariableDeclaration(node.kind, declarators.map(x -> (VariableDeclarator) x));
    }

    @Nonnull
    @Override
    public Statement reduceVariableDeclarationStatement(
            @Nonnull VariableDeclarationStatement node,
            @Nonnull Node declaration) {
        return new VariableDeclarationStatement((VariableDeclaration) declaration);
    }

    @Nonnull
    @Override
    public VariableDeclarator reduceVariableDeclarator(
            @Nonnull VariableDeclarator node,
            @Nonnull Node binding,
            @Nonnull Maybe<Node> init) {
        return new VariableDeclarator((Binding) binding, init.map(x -> (Expression) x));
    }

    @Nonnull
    @Override
    public Statement reduceWhileStatement(
            @Nonnull WhileStatement node,
            @Nonnull Node test,
            @Nonnull Node body) {
        return new WhileStatement((Expression) test, (Statement) body);
    }

    @Nonnull
    @Override
    public Statement reduceWithStatement(
            @Nonnull WithStatement node,
            @Nonnull Node object,
            @Nonnull Node body) {
        return new WithStatement((Expression) object, (Statement) body);
    }

    @Nonnull
    @Override
    public Expression reduceYieldExpression(
            @Nonnull YieldExpression node,
            @Nonnull Maybe<Node> expression) {
        return new YieldExpression(expression.map(x -> (Expression) x));
    }

    @Nonnull
    @Override
    public Expression reduceYieldGeneratorExpression(
            @Nonnull YieldGeneratorExpression node,
            @Nonnull Node expression) {
        return new YieldGeneratorExpression((Expression) expression);
    }
}
