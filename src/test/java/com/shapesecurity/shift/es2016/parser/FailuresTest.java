package com.shapesecurity.shift.es2016.parser;

import org.junit.Test;

public class FailuresTest extends ParserTestCase {
    @Test
        public void testFailures() throws JsError {
        testScriptFailure("/*", 2, "Unexpected end of input");
        testScriptFailureML("/*\r", 2, 0, 3, "Unexpected end of input");
        testScriptFailureML("/*\r\n", 2, 0, 4, "Unexpected end of input");
        testScriptFailureML("/*\u2028", 2, 0, 3, "Unexpected end of input");
        testScriptFailureML("/*\u2029", 2, 0, 3, "Unexpected end of input");
        testScriptFailure("/**", 3, "Unexpected end of input");
        testScriptFailure("\\", 1, "Unexpected end of input");
        testScriptFailure("\\u", 2, "Unexpected end of input");
        testScriptFailure("\\x", 1, "Unexpected \"x\"");
        testScriptFailure("\\o", 1, "Unexpected \"o\"");
        testScriptFailure("\\u1", 2, "Unexpected \"1\"");
        testScriptFailure("\\u12", 2, "Unexpected \"1\"");
        testScriptFailure("\\u113", 2, "Unexpected \"1\"");
        testScriptFailure("a\\uz   ", 3, "Unexpected \"z\"");
        testScriptFailure("a\\u1z  ", 3, "Unexpected \"1\"");
        testScriptFailure("a\\u11z ", 3, "Unexpected \"1\"");
        testScriptFailure("a\\u111z", 3, "Unexpected \"1\"");
        testScriptFailure("a\\", 2, "Unexpected end of input");
        testScriptFailure("a\\u", 3, "Unexpected end of input");
        testScriptFailure("a\\x", 2, "Unexpected \"x\"");
        testScriptFailure("a\\o", 2, "Unexpected \"o\"");
        testScriptFailure("a\\u1", 3, "Unexpected \"1\"");
        testScriptFailure("a\\u12", 3, "Unexpected \"1\"");
        testScriptFailure("a\\u113", 3, "Unexpected \"1\"");
        testScriptFailure("\\uD800", 6, "Unexpected end of input");
        testScriptFailure("\\uD800x", 6, "Unexpected \"x\"");
        testScriptFailure("\\uD800\\", 6, "Unexpected \"\\\\\"");
        testScriptFailure("\\uD800\\u", 6, "Unexpected \"\\\\\"");
        testScriptFailure("\\uD800\\x62", 6, "Unexpected \"\\\\\"");
        testScriptFailure("\uD800", 1, "Unexpected end of input");
        testScriptFailure("\uD800x", 2, "Unexpected end of input");
        testScriptFailure("\uD800\\", 2, "Unexpected end of input");
        testScriptFailure("\uD800\\u", 2, "Unexpected \"u\"");
        testScriptFailure("\uD800\\x62", 2, "Unexpected \"x\"");
        testScriptFailure("'\\03", 4, "Unexpected end of input");
        testScriptFailure("'\\x", 3, "Unexpected end of input");
        testScriptFailure("'\\x1", 3, "Unexpected \"1\"");
        testScriptFailure("'\\x1   ", 3, "Unexpected \"1\"");
        testScriptFailure("'\\x12  ", 7, "Unexpected end of input");
        testScriptFailure("'\n", 1, "Unexpected \"\\n\"");
        testScriptFailure("'\\", 2, "Unexpected end of input");
        testScriptFailure("ï¼Š", 0, "Unexpected \"\uFF0A\"");
        testScriptFailure("1.a", 2, "Unexpected \"a\"");
        testScriptFailure("1.e", 3, "Unexpected end of input");
        testScriptFailure("1.e+", 4, "Unexpected end of input");
        testScriptFailure("1.e+z", 4, "Unexpected \"z\"");
        testScriptFailure("/\\\n0", 0, "Invalid regular expression: missing /");
        testScriptFailure("0x", 2, "Unexpected end of input");
        testScriptFailure("0xz", 2, "Unexpected \"z\"");
        testScriptFailure("0x1z", 2, "Unexpected \"1\"");
        testScriptFailure("0a", 1, "Unexpected \"a\"");
        testScriptFailure("08a", 2, "Unexpected \"a\"");
        testScriptFailure("\u0008", 0, "Unexpected \"\\b\"");
        testScriptFailure("{", 1, "Unexpected end of input");
        testScriptFailure("}", 0, "Unexpected token \"}\"");
        testScriptFailure("3ea", 2, "Unexpected \"a\"");
        testScriptFailure("3in []", 1, "Unexpected \"i\"");
        testScriptFailure("3e", 2, "Unexpected end of input");
        testScriptFailure("3e+", 3, "Unexpected end of input");
        testScriptFailure("3e-", 3, "Unexpected end of input");
        testScriptFailure("3x", 1, "Unexpected \"x\"");
        testScriptFailure("3x0", 1, "Unexpected \"x\"");
        testScriptFailure("0x", 2, "Unexpected end of input");
        testScriptFailure("01a", 2, "Unexpected \"a\"");
        testScriptFailure("3in[]", 1, "Unexpected \"i\"");
        testScriptFailure("0x3in[]", 2, "Unexpected \"3\""); // TODO: shouldn't this be "Unexpected \"i\""?
        testScriptFailure("\"Hello\nWorld\"", 6, "Unexpected \"\\n\"");
        testScriptFailure("x\\", 2, "Unexpected end of input");
        testScriptFailure("x\\u005c", 7, "Unexpected end of input");
        testScriptFailure("x\\u002a", 7, "Unexpected end of input");
        testScriptFailure("a\\u", 3, "Unexpected end of input");
        testScriptFailure("\\ua", 2, "Unexpected \"a\"");
        testScriptFailure("/", 0, "Invalid regular expression: missing /");
        testScriptFailure("/test", 0, "Invalid regular expression: missing /");
        testScriptFailure("/test\n/", 0, "Invalid regular expression: missing /");
        testScriptFailure("for((1 + 1) in list) process(x);", 12, "Invalid left-hand side in for-in");
        testScriptFailure("[", 1, "Unexpected end of input");
        testScriptFailure("[,", 2, "Unexpected end of input");
        testScriptFailure("1 + {", 5, "Unexpected end of input");
        testScriptFailure("1 + { t:t ", 10, "Unexpected end of input");
        testScriptFailure("1 + { t:t,", 10, "Unexpected end of input");
        testScriptFailure("var x = /\n/", 8, "Invalid regular expression: missing /");
        testScriptFailure("var x = \"\n", 9, "Unexpected \"\\n\"");
        testScriptFailure("var if = 0", 4, "Unexpected token \"if\"");
        testScriptFailure("i #= 0", 2, "Unexpected \"#\"");
        testScriptFailure("1 + (", 5, "Unexpected end of input");
        testScriptFailureML("\n\n\n{", 4, 1, 4, "Unexpected end of input");
        testScriptFailureML("\n/* Some multiline\ncomment */\n)", 4, 0, 30, "Unexpected token \")\"");
        testScriptFailure("{ set 1 }", 6, "Unexpected number");
        testScriptFailure("{ get 2 }", 6, "Unexpected number");
        testScriptFailure("({ set: s(if) { } })", 10, "Unexpected token \"if\"");
        testScriptFailure("({ set s(.) { } })", 9, "Unexpected token \".\"");
        testScriptFailure("({ set s() { } })", 9, "Unexpected token \")\"");
        testScriptFailure("({ set: s() { } })", 12, "Unexpected token \"{\"");
        testScriptFailure("({ set: s(a, 0, b) { } })", 19, "Unexpected token \"{\"");
        testScriptFailure("({ get: g(d) { } })", 13, "Unexpected token \"{\"");
        testScriptFailure("function t(if) { }", 11, "Unexpected token \"if\"");
        testScriptFailure("function t(true) { }", 11, "Unexpected token \"true\"");
        testScriptFailure("function t(false) { }", 11, "Unexpected token \"false\"");
        testScriptFailure("function t(null) { }", 11, "Unexpected token \"null\"");
        testScriptFailure("function null() { }", 9, "Unexpected token \"null\"");
        testScriptFailure("function true() { }", 9, "Unexpected token \"true\"");
        testScriptFailure("function false() { }", 9, "Unexpected token \"false\"");
        testScriptFailure("function if() { }", 9, "Unexpected token \"if\"");
        testScriptFailure("a b;", 2, "Unexpected identifier");
        testScriptFailure("if.a;", 2, "Unexpected token \".\"");
        testScriptFailure("a if;", 2, "Unexpected token \"if\"");
        testScriptFailure("a class;", 2, "Unexpected token \"class\"");
        testScriptFailure("break 1;", 6, "Unexpected number");
        testScriptFailure("continue 2;", 9, "Unexpected number");
        testScriptFailure("throw", 5, "Unexpected end of input");
        testScriptFailure("throw;", 5, "Unexpected token \";\"");
        testScriptFailureML("throw\n", 2, 0, 6, "Illegal newline after throw");
        testScriptFailure("for (var i, i0, i2 in {});", 19, "Unexpected token \"in\"");
        testScriptFailure("for ((i in {}));", 14, "Unexpected token \")\"");
        testScriptFailure("for (i + 1 in {});", 11, "Invalid left-hand side in for-in");
        testScriptFailure("for (+i in {});", 8, "Invalid left-hand side in for-in");
        testScriptFailure("if(false)", 9, "Unexpected end of input");
        testScriptFailure("if(false) doThis(); else", 24, "Unexpected end of input");
        testScriptFailure("do", 2, "Unexpected end of input");
        testScriptFailure("while(false)", 12, "Unexpected end of input");
        testScriptFailure("for(;;)", 7, "Unexpected end of input");
        testScriptFailure("with(x)", 7, "Unexpected end of input");
        testScriptFailure("try { }", 7, "Missing catch or finally after try");
        testScriptFailure("try {} catch (0) {} ", 14, "Unexpected number");
        testScriptFailure("try {} catch (answer()) {} ", 20, "Unexpected token \"(\"");
        testScriptFailure("try {} catch (-x) {} ", 14, "Unexpected token \"-\"");
        testScriptFailure("\u203F = 10", 0, "Unexpected \"\u203F\"");
        testScriptFailure("switch (c) { default: default: }", 22, "More than one default clause in switch statement");
        testScriptFailure("new X().\"s\"", 8, "Unexpected string");
        testScriptFailureML("/*\n\n\n", 4, 0, 5, "Unexpected end of input");
        testScriptFailure("/**", 3, "Unexpected end of input");
        testScriptFailureML("/*\n\n*", 3, 1, 5, "Unexpected end of input");
        testScriptFailure("/*hello", 7, "Unexpected end of input");
        testScriptFailure("/*hello  *", 10, "Unexpected end of input");
        testScriptFailureML("\n]", 2, 0, 1, "Unexpected token \"]\"");
        testScriptFailureML("\r]", 2, 0, 1, "Unexpected token \"]\"");
        testScriptFailureML("\r\n]", 2, 0, 2, "Unexpected token \"]\"");
        testScriptFailureML("\n\r]", 3, 0, 2, "Unexpected token \"]\"");
        testScriptFailureML("//\r\n]", 2, 0, 4, "Unexpected token \"]\"");
        testScriptFailureML("//\n\r]", 3, 0, 4, "Unexpected token \"]\"");
        testScriptFailureML("/a\\\n/", 1, 0, 0, "Invalid regular expression: missing /");
        testScriptFailureML("//\r \n]", 3, 0, 5, "Unexpected token \"]\"");
        testScriptFailureML("/*\r\n*/]", 2, 2, 6, "Unexpected token \"]\"");
        testScriptFailureML("/*\n\r*/]", 3, 2, 6, "Unexpected token \"]\"");
        testScriptFailureML("/*\r \n*/]", 3, 2, 7, "Unexpected token \"]\"");
        testScriptFailure("\\\\", 1, "Unexpected \"\\\\\"");
        testScriptFailure("\\u005c", 6, "Unexpected end of input");
        testScriptFailure("\\x", 1, "Unexpected \"x\"");
        testScriptFailure("\\u0000", 6, "Unexpected end of input");
        testScriptFailure("\u200C = []", 0, "Unexpected \"\u200C\"");
        testScriptFailure("\u200D = []", 0, "Unexpected \"\u200D\"");
        testScriptFailure("\"\\", 2, "Unexpected end of input");
        testScriptFailure("\"\\u", 3, "Unexpected end of input");
        testScriptFailure("try { } catch() {}", 14, "Unexpected token \")\"");
        testScriptFailure("do { x } *", 9, "Unexpected token \"*\"");
        testScriptFailure("var", 3, "Unexpected end of input");
        testScriptFailure("const", 0, "Unexpected token \"const\"");
        testScriptFailure("a enum", 2, "Unexpected reserved word");
        testScriptFailure("{ ;  ;  ", 8, "Unexpected end of input");
        testScriptFailure("({get +:3})", 6, "Unexpected token \"+\"");
        testScriptFailure("({get +:3})", 6, "Unexpected token \"+\"");
        testScriptFailure("function t() { ;  ;  ", 21, "Unexpected end of input");
        testScriptFailure("#=", 0, "Unexpected \"#\"");
        testScriptFailure("**", 0, "Unexpected token \"**\"");
        testScriptFailure("({a = 0});", 2, "Illegal property initializer");
        testScriptFailure("({a: 0, b = 0});", 8, "Illegal property initializer");
        testScriptFailure("({a: b = 0, c, c = 0});", 15, "Illegal property initializer");
        testScriptFailure("[{a = 0}];", 2, "Illegal property initializer");
        testScriptFailure("[+{a = 0}];", 3, "Illegal property initializer");
        testScriptFailure("function* f() { [yield {a = 0}]; }", 24, "Illegal property initializer");
        testScriptFailure("function* f() { [yield* {a = 0}]; }", 25, "Illegal property initializer");
        testScriptFailure("1 / %", 4, "Unexpected token \"%\"");
        testScriptFailure("\\u{}", 3, "Unexpected \"}\"");
        testScriptFailure("\"\\u{}\"", 4, "Unexpected \"}\"");
        testScriptFailure("(\"\\u{}\")", 5, "Unexpected \"}\"");
    }
}
