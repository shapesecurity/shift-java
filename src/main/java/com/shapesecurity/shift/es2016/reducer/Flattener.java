// Generated by shift-spec-java/reducer.js

/**
 * Copyright 2016 Shape Security, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License")
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.shapesecurity.shift.es2016.reducer;

import com.shapesecurity.functional.data.ImmutableList;
import com.shapesecurity.functional.data.Maybe;
import com.shapesecurity.shift.es2016.ast.*;
import javax.annotation.Nonnull;

public class Flattener extends MonoidalReducer<ImmutableList<Node>> {
    private static final Flattener INSTANCE = new Flattener();

    private Flattener() {
        super(new com.shapesecurity.functional.data.Monoid.ImmutableListAppend<>());
    }

    @Nonnull
    public static ImmutableList<Node> flatten(@Nonnull Program program) {
        return Director.reduceProgram(INSTANCE, program);
    }

    @Nonnull
    @Override
    public ImmutableList<Node> reduceArrayAssignmentTarget(@Nonnull ArrayAssignmentTarget node, @Nonnull ImmutableList<Maybe<ImmutableList<Node>>> elements, @Nonnull Maybe<ImmutableList<Node>> rest) {
        return ImmutableList.<Node>of(node).append(super.reduceArrayAssignmentTarget(node, elements, rest));
    }

    @Nonnull
    @Override
    public ImmutableList<Node> reduceArrayBinding(@Nonnull ArrayBinding node, @Nonnull ImmutableList<Maybe<ImmutableList<Node>>> elements, @Nonnull Maybe<ImmutableList<Node>> rest) {
        return ImmutableList.<Node>of(node).append(super.reduceArrayBinding(node, elements, rest));
    }

    @Nonnull
    @Override
    public ImmutableList<Node> reduceArrayExpression(@Nonnull ArrayExpression node, @Nonnull ImmutableList<Maybe<ImmutableList<Node>>> elements) {
        return ImmutableList.<Node>of(node).append(super.reduceArrayExpression(node, elements));
    }

    @Nonnull
    @Override
    public ImmutableList<Node> reduceArrowExpression(@Nonnull ArrowExpression node, @Nonnull ImmutableList<Node> params, @Nonnull ImmutableList<Node> body) {
        return ImmutableList.<Node>of(node).append(super.reduceArrowExpression(node, params, body));
    }

    @Nonnull
    @Override
    public ImmutableList<Node> reduceAssignmentExpression(@Nonnull AssignmentExpression node, @Nonnull ImmutableList<Node> binding, @Nonnull ImmutableList<Node> expression) {
        return ImmutableList.<Node>of(node).append(super.reduceAssignmentExpression(node, binding, expression));
    }

    @Nonnull
    @Override
    public ImmutableList<Node> reduceAssignmentTargetIdentifier(@Nonnull AssignmentTargetIdentifier node) {
        return ImmutableList.<Node>of(node);
    }

    @Nonnull
    @Override
    public ImmutableList<Node> reduceAssignmentTargetPropertyIdentifier(@Nonnull AssignmentTargetPropertyIdentifier node, @Nonnull ImmutableList<Node> binding, @Nonnull Maybe<ImmutableList<Node>> init) {
        return ImmutableList.<Node>of(node).append(super.reduceAssignmentTargetPropertyIdentifier(node, binding, init));
    }

    @Nonnull
    @Override
    public ImmutableList<Node> reduceAssignmentTargetPropertyProperty(@Nonnull AssignmentTargetPropertyProperty node, @Nonnull ImmutableList<Node> name, @Nonnull ImmutableList<Node> binding) {
        return ImmutableList.<Node>of(node).append(super.reduceAssignmentTargetPropertyProperty(node, name, binding));
    }

    @Nonnull
    @Override
    public ImmutableList<Node> reduceAssignmentTargetWithDefault(@Nonnull AssignmentTargetWithDefault node, @Nonnull ImmutableList<Node> binding, @Nonnull ImmutableList<Node> init) {
        return ImmutableList.<Node>of(node).append(super.reduceAssignmentTargetWithDefault(node, binding, init));
    }

    @Nonnull
    @Override
    public ImmutableList<Node> reduceBinaryExpression(@Nonnull BinaryExpression node, @Nonnull ImmutableList<Node> left, @Nonnull ImmutableList<Node> right) {
        return ImmutableList.<Node>of(node).append(super.reduceBinaryExpression(node, left, right));
    }

    @Nonnull
    @Override
    public ImmutableList<Node> reduceBindingIdentifier(@Nonnull BindingIdentifier node) {
        return ImmutableList.<Node>of(node);
    }

    @Nonnull
    @Override
    public ImmutableList<Node> reduceBindingPropertyIdentifier(@Nonnull BindingPropertyIdentifier node, @Nonnull ImmutableList<Node> binding, @Nonnull Maybe<ImmutableList<Node>> init) {
        return ImmutableList.<Node>of(node).append(super.reduceBindingPropertyIdentifier(node, binding, init));
    }

    @Nonnull
    @Override
    public ImmutableList<Node> reduceBindingPropertyProperty(@Nonnull BindingPropertyProperty node, @Nonnull ImmutableList<Node> name, @Nonnull ImmutableList<Node> binding) {
        return ImmutableList.<Node>of(node).append(super.reduceBindingPropertyProperty(node, name, binding));
    }

    @Nonnull
    @Override
    public ImmutableList<Node> reduceBindingWithDefault(@Nonnull BindingWithDefault node, @Nonnull ImmutableList<Node> binding, @Nonnull ImmutableList<Node> init) {
        return ImmutableList.<Node>of(node).append(super.reduceBindingWithDefault(node, binding, init));
    }

    @Nonnull
    @Override
    public ImmutableList<Node> reduceBlock(@Nonnull Block node, @Nonnull ImmutableList<ImmutableList<Node>> statements) {
        return ImmutableList.<Node>of(node).append(super.reduceBlock(node, statements));
    }

    @Nonnull
    @Override
    public ImmutableList<Node> reduceBlockStatement(@Nonnull BlockStatement node, @Nonnull ImmutableList<Node> block) {
        return ImmutableList.<Node>of(node).append(super.reduceBlockStatement(node, block));
    }

    @Nonnull
    @Override
    public ImmutableList<Node> reduceBreakStatement(@Nonnull BreakStatement node) {
        return ImmutableList.<Node>of(node);
    }

    @Nonnull
    @Override
    public ImmutableList<Node> reduceCallExpression(@Nonnull CallExpression node, @Nonnull ImmutableList<Node> callee, @Nonnull ImmutableList<ImmutableList<Node>> arguments) {
        return ImmutableList.<Node>of(node).append(super.reduceCallExpression(node, callee, arguments));
    }

    @Nonnull
    @Override
    public ImmutableList<Node> reduceCatchClause(@Nonnull CatchClause node, @Nonnull ImmutableList<Node> binding, @Nonnull ImmutableList<Node> body) {
        return ImmutableList.<Node>of(node).append(super.reduceCatchClause(node, binding, body));
    }

    @Nonnull
    @Override
    public ImmutableList<Node> reduceClassDeclaration(@Nonnull ClassDeclaration node, @Nonnull ImmutableList<Node> name, @Nonnull Maybe<ImmutableList<Node>> _super, @Nonnull ImmutableList<ImmutableList<Node>> elements) {
        return ImmutableList.<Node>of(node).append(super.reduceClassDeclaration(node, name, _super, elements));
    }

    @Nonnull
    @Override
    public ImmutableList<Node> reduceClassElement(@Nonnull ClassElement node, @Nonnull ImmutableList<Node> method) {
        return ImmutableList.<Node>of(node).append(super.reduceClassElement(node, method));
    }

    @Nonnull
    @Override
    public ImmutableList<Node> reduceClassExpression(@Nonnull ClassExpression node, @Nonnull Maybe<ImmutableList<Node>> name, @Nonnull Maybe<ImmutableList<Node>> _super, @Nonnull ImmutableList<ImmutableList<Node>> elements) {
        return ImmutableList.<Node>of(node).append(super.reduceClassExpression(node, name, _super, elements));
    }

    @Nonnull
    @Override
    public ImmutableList<Node> reduceCompoundAssignmentExpression(@Nonnull CompoundAssignmentExpression node, @Nonnull ImmutableList<Node> binding, @Nonnull ImmutableList<Node> expression) {
        return ImmutableList.<Node>of(node).append(super.reduceCompoundAssignmentExpression(node, binding, expression));
    }

    @Nonnull
    @Override
    public ImmutableList<Node> reduceComputedMemberAssignmentTarget(@Nonnull ComputedMemberAssignmentTarget node, @Nonnull ImmutableList<Node> object, @Nonnull ImmutableList<Node> expression) {
        return ImmutableList.<Node>of(node).append(super.reduceComputedMemberAssignmentTarget(node, object, expression));
    }

    @Nonnull
    @Override
    public ImmutableList<Node> reduceComputedMemberExpression(@Nonnull ComputedMemberExpression node, @Nonnull ImmutableList<Node> object, @Nonnull ImmutableList<Node> expression) {
        return ImmutableList.<Node>of(node).append(super.reduceComputedMemberExpression(node, object, expression));
    }

    @Nonnull
    @Override
    public ImmutableList<Node> reduceComputedPropertyName(@Nonnull ComputedPropertyName node, @Nonnull ImmutableList<Node> expression) {
        return ImmutableList.<Node>of(node).append(super.reduceComputedPropertyName(node, expression));
    }

    @Nonnull
    @Override
    public ImmutableList<Node> reduceConditionalExpression(@Nonnull ConditionalExpression node, @Nonnull ImmutableList<Node> test, @Nonnull ImmutableList<Node> consequent, @Nonnull ImmutableList<Node> alternate) {
        return ImmutableList.<Node>of(node).append(super.reduceConditionalExpression(node, test, consequent, alternate));
    }

    @Nonnull
    @Override
    public ImmutableList<Node> reduceContinueStatement(@Nonnull ContinueStatement node) {
        return ImmutableList.<Node>of(node);
    }

    @Nonnull
    @Override
    public ImmutableList<Node> reduceDataProperty(@Nonnull DataProperty node, @Nonnull ImmutableList<Node> name, @Nonnull ImmutableList<Node> expression) {
        return ImmutableList.<Node>of(node).append(super.reduceDataProperty(node, name, expression));
    }

    @Nonnull
    @Override
    public ImmutableList<Node> reduceDebuggerStatement(@Nonnull DebuggerStatement node) {
        return ImmutableList.<Node>of(node);
    }

    @Nonnull
    @Override
    public ImmutableList<Node> reduceDirective(@Nonnull Directive node) {
        return ImmutableList.<Node>of(node);
    }

    @Nonnull
    @Override
    public ImmutableList<Node> reduceDoWhileStatement(@Nonnull DoWhileStatement node, @Nonnull ImmutableList<Node> body, @Nonnull ImmutableList<Node> test) {
        return ImmutableList.<Node>of(node).append(super.reduceDoWhileStatement(node, body, test));
    }

    @Nonnull
    @Override
    public ImmutableList<Node> reduceEmptyStatement(@Nonnull EmptyStatement node) {
        return ImmutableList.<Node>of(node);
    }

    @Nonnull
    @Override
    public ImmutableList<Node> reduceExport(@Nonnull Export node, @Nonnull ImmutableList<Node> declaration) {
        return ImmutableList.<Node>of(node).append(super.reduceExport(node, declaration));
    }

    @Nonnull
    @Override
    public ImmutableList<Node> reduceExportAllFrom(@Nonnull ExportAllFrom node) {
        return ImmutableList.<Node>of(node);
    }

    @Nonnull
    @Override
    public ImmutableList<Node> reduceExportDefault(@Nonnull ExportDefault node, @Nonnull ImmutableList<Node> body) {
        return ImmutableList.<Node>of(node).append(super.reduceExportDefault(node, body));
    }

    @Nonnull
    @Override
    public ImmutableList<Node> reduceExportFrom(@Nonnull ExportFrom node, @Nonnull ImmutableList<ImmutableList<Node>> namedExports) {
        return ImmutableList.<Node>of(node).append(super.reduceExportFrom(node, namedExports));
    }

    @Nonnull
    @Override
    public ImmutableList<Node> reduceExportFromSpecifier(@Nonnull ExportFromSpecifier node) {
        return ImmutableList.<Node>of(node);
    }

    @Nonnull
    @Override
    public ImmutableList<Node> reduceExportLocalSpecifier(@Nonnull ExportLocalSpecifier node, @Nonnull ImmutableList<Node> name) {
        return ImmutableList.<Node>of(node).append(super.reduceExportLocalSpecifier(node, name));
    }

    @Nonnull
    @Override
    public ImmutableList<Node> reduceExportLocals(@Nonnull ExportLocals node, @Nonnull ImmutableList<ImmutableList<Node>> namedExports) {
        return ImmutableList.<Node>of(node).append(super.reduceExportLocals(node, namedExports));
    }

    @Nonnull
    @Override
    public ImmutableList<Node> reduceExpressionStatement(@Nonnull ExpressionStatement node, @Nonnull ImmutableList<Node> expression) {
        return ImmutableList.<Node>of(node).append(super.reduceExpressionStatement(node, expression));
    }

    @Nonnull
    @Override
    public ImmutableList<Node> reduceForInStatement(@Nonnull ForInStatement node, @Nonnull ImmutableList<Node> left, @Nonnull ImmutableList<Node> right, @Nonnull ImmutableList<Node> body) {
        return ImmutableList.<Node>of(node).append(super.reduceForInStatement(node, left, right, body));
    }

    @Nonnull
    @Override
    public ImmutableList<Node> reduceForOfStatement(@Nonnull ForOfStatement node, @Nonnull ImmutableList<Node> left, @Nonnull ImmutableList<Node> right, @Nonnull ImmutableList<Node> body) {
        return ImmutableList.<Node>of(node).append(super.reduceForOfStatement(node, left, right, body));
    }

    @Nonnull
    @Override
    public ImmutableList<Node> reduceForStatement(@Nonnull ForStatement node, @Nonnull Maybe<ImmutableList<Node>> init, @Nonnull Maybe<ImmutableList<Node>> test, @Nonnull Maybe<ImmutableList<Node>> update, @Nonnull ImmutableList<Node> body) {
        return ImmutableList.<Node>of(node).append(super.reduceForStatement(node, init, test, update, body));
    }

    @Nonnull
    @Override
    public ImmutableList<Node> reduceFormalParameters(@Nonnull FormalParameters node, @Nonnull ImmutableList<ImmutableList<Node>> items, @Nonnull Maybe<ImmutableList<Node>> rest) {
        return ImmutableList.<Node>of(node).append(super.reduceFormalParameters(node, items, rest));
    }

    @Nonnull
    @Override
    public ImmutableList<Node> reduceFunctionBody(@Nonnull FunctionBody node, @Nonnull ImmutableList<ImmutableList<Node>> directives, @Nonnull ImmutableList<ImmutableList<Node>> statements) {
        return ImmutableList.<Node>of(node).append(super.reduceFunctionBody(node, directives, statements));
    }

    @Nonnull
    @Override
    public ImmutableList<Node> reduceFunctionDeclaration(@Nonnull FunctionDeclaration node, @Nonnull ImmutableList<Node> name, @Nonnull ImmutableList<Node> params, @Nonnull ImmutableList<Node> body) {
        return ImmutableList.<Node>of(node).append(super.reduceFunctionDeclaration(node, name, params, body));
    }

    @Nonnull
    @Override
    public ImmutableList<Node> reduceFunctionExpression(@Nonnull FunctionExpression node, @Nonnull Maybe<ImmutableList<Node>> name, @Nonnull ImmutableList<Node> params, @Nonnull ImmutableList<Node> body) {
        return ImmutableList.<Node>of(node).append(super.reduceFunctionExpression(node, name, params, body));
    }

    @Nonnull
    @Override
    public ImmutableList<Node> reduceGetter(@Nonnull Getter node, @Nonnull ImmutableList<Node> name, @Nonnull ImmutableList<Node> body) {
        return ImmutableList.<Node>of(node).append(super.reduceGetter(node, name, body));
    }

    @Nonnull
    @Override
    public ImmutableList<Node> reduceIdentifierExpression(@Nonnull IdentifierExpression node) {
        return ImmutableList.<Node>of(node);
    }

    @Nonnull
    @Override
    public ImmutableList<Node> reduceIfStatement(@Nonnull IfStatement node, @Nonnull ImmutableList<Node> test, @Nonnull ImmutableList<Node> consequent, @Nonnull Maybe<ImmutableList<Node>> alternate) {
        return ImmutableList.<Node>of(node).append(super.reduceIfStatement(node, test, consequent, alternate));
    }

    @Nonnull
    @Override
    public ImmutableList<Node> reduceImport(@Nonnull Import node, @Nonnull Maybe<ImmutableList<Node>> defaultBinding, @Nonnull ImmutableList<ImmutableList<Node>> namedImports) {
        return ImmutableList.<Node>of(node).append(super.reduceImport(node, defaultBinding, namedImports));
    }

    @Nonnull
    @Override
    public ImmutableList<Node> reduceImportNamespace(@Nonnull ImportNamespace node, @Nonnull Maybe<ImmutableList<Node>> defaultBinding, @Nonnull ImmutableList<Node> namespaceBinding) {
        return ImmutableList.<Node>of(node).append(super.reduceImportNamespace(node, defaultBinding, namespaceBinding));
    }

    @Nonnull
    @Override
    public ImmutableList<Node> reduceImportSpecifier(@Nonnull ImportSpecifier node, @Nonnull ImmutableList<Node> binding) {
        return ImmutableList.<Node>of(node).append(super.reduceImportSpecifier(node, binding));
    }

    @Nonnull
    @Override
    public ImmutableList<Node> reduceLabeledStatement(@Nonnull LabeledStatement node, @Nonnull ImmutableList<Node> body) {
        return ImmutableList.<Node>of(node).append(super.reduceLabeledStatement(node, body));
    }

    @Nonnull
    @Override
    public ImmutableList<Node> reduceLiteralBooleanExpression(@Nonnull LiteralBooleanExpression node) {
        return ImmutableList.<Node>of(node);
    }

    @Nonnull
    @Override
    public ImmutableList<Node> reduceLiteralInfinityExpression(@Nonnull LiteralInfinityExpression node) {
        return ImmutableList.<Node>of(node);
    }

    @Nonnull
    @Override
    public ImmutableList<Node> reduceLiteralNullExpression(@Nonnull LiteralNullExpression node) {
        return ImmutableList.<Node>of(node);
    }

    @Nonnull
    @Override
    public ImmutableList<Node> reduceLiteralNumericExpression(@Nonnull LiteralNumericExpression node) {
        return ImmutableList.<Node>of(node);
    }

    @Nonnull
    @Override
    public ImmutableList<Node> reduceLiteralRegExpExpression(@Nonnull LiteralRegExpExpression node) {
        return ImmutableList.<Node>of(node);
    }

    @Nonnull
    @Override
    public ImmutableList<Node> reduceLiteralStringExpression(@Nonnull LiteralStringExpression node) {
        return ImmutableList.<Node>of(node);
    }

    @Nonnull
    @Override
    public ImmutableList<Node> reduceMethod(@Nonnull Method node, @Nonnull ImmutableList<Node> name, @Nonnull ImmutableList<Node> params, @Nonnull ImmutableList<Node> body) {
        return ImmutableList.<Node>of(node).append(super.reduceMethod(node, name, params, body));
    }

    @Nonnull
    @Override
    public ImmutableList<Node> reduceModule(@Nonnull Module node, @Nonnull ImmutableList<ImmutableList<Node>> directives, @Nonnull ImmutableList<ImmutableList<Node>> items) {
        return ImmutableList.<Node>of(node).append(super.reduceModule(node, directives, items));
    }

    @Nonnull
    @Override
    public ImmutableList<Node> reduceNewExpression(@Nonnull NewExpression node, @Nonnull ImmutableList<Node> callee, @Nonnull ImmutableList<ImmutableList<Node>> arguments) {
        return ImmutableList.<Node>of(node).append(super.reduceNewExpression(node, callee, arguments));
    }

    @Nonnull
    @Override
    public ImmutableList<Node> reduceNewTargetExpression(@Nonnull NewTargetExpression node) {
        return ImmutableList.<Node>of(node);
    }

    @Nonnull
    @Override
    public ImmutableList<Node> reduceObjectAssignmentTarget(@Nonnull ObjectAssignmentTarget node, @Nonnull ImmutableList<ImmutableList<Node>> properties) {
        return ImmutableList.<Node>of(node).append(super.reduceObjectAssignmentTarget(node, properties));
    }

    @Nonnull
    @Override
    public ImmutableList<Node> reduceObjectBinding(@Nonnull ObjectBinding node, @Nonnull ImmutableList<ImmutableList<Node>> properties) {
        return ImmutableList.<Node>of(node).append(super.reduceObjectBinding(node, properties));
    }

    @Nonnull
    @Override
    public ImmutableList<Node> reduceObjectExpression(@Nonnull ObjectExpression node, @Nonnull ImmutableList<ImmutableList<Node>> properties) {
        return ImmutableList.<Node>of(node).append(super.reduceObjectExpression(node, properties));
    }

    @Nonnull
    @Override
    public ImmutableList<Node> reduceReturnStatement(@Nonnull ReturnStatement node, @Nonnull Maybe<ImmutableList<Node>> expression) {
        return ImmutableList.<Node>of(node).append(super.reduceReturnStatement(node, expression));
    }

    @Nonnull
    @Override
    public ImmutableList<Node> reduceScript(@Nonnull Script node, @Nonnull ImmutableList<ImmutableList<Node>> directives, @Nonnull ImmutableList<ImmutableList<Node>> statements) {
        return ImmutableList.<Node>of(node).append(super.reduceScript(node, directives, statements));
    }

    @Nonnull
    @Override
    public ImmutableList<Node> reduceSetter(@Nonnull Setter node, @Nonnull ImmutableList<Node> name, @Nonnull ImmutableList<Node> param, @Nonnull ImmutableList<Node> body) {
        return ImmutableList.<Node>of(node).append(super.reduceSetter(node, name, param, body));
    }

    @Nonnull
    @Override
    public ImmutableList<Node> reduceShorthandProperty(@Nonnull ShorthandProperty node, @Nonnull ImmutableList<Node> name) {
        return ImmutableList.<Node>of(node).append(super.reduceShorthandProperty(node, name));
    }

    @Nonnull
    @Override
    public ImmutableList<Node> reduceSpreadElement(@Nonnull SpreadElement node, @Nonnull ImmutableList<Node> expression) {
        return ImmutableList.<Node>of(node).append(super.reduceSpreadElement(node, expression));
    }

    @Nonnull
    @Override
    public ImmutableList<Node> reduceStaticMemberAssignmentTarget(@Nonnull StaticMemberAssignmentTarget node, @Nonnull ImmutableList<Node> object) {
        return ImmutableList.<Node>of(node).append(super.reduceStaticMemberAssignmentTarget(node, object));
    }

    @Nonnull
    @Override
    public ImmutableList<Node> reduceStaticMemberExpression(@Nonnull StaticMemberExpression node, @Nonnull ImmutableList<Node> object) {
        return ImmutableList.<Node>of(node).append(super.reduceStaticMemberExpression(node, object));
    }

    @Nonnull
    @Override
    public ImmutableList<Node> reduceStaticPropertyName(@Nonnull StaticPropertyName node) {
        return ImmutableList.<Node>of(node);
    }

    @Nonnull
    @Override
    public ImmutableList<Node> reduceSuper(@Nonnull Super node) {
        return ImmutableList.<Node>of(node);
    }

    @Nonnull
    @Override
    public ImmutableList<Node> reduceSwitchCase(@Nonnull SwitchCase node, @Nonnull ImmutableList<Node> test, @Nonnull ImmutableList<ImmutableList<Node>> consequent) {
        return ImmutableList.<Node>of(node).append(super.reduceSwitchCase(node, test, consequent));
    }

    @Nonnull
    @Override
    public ImmutableList<Node> reduceSwitchDefault(@Nonnull SwitchDefault node, @Nonnull ImmutableList<ImmutableList<Node>> consequent) {
        return ImmutableList.<Node>of(node).append(super.reduceSwitchDefault(node, consequent));
    }

    @Nonnull
    @Override
    public ImmutableList<Node> reduceSwitchStatement(@Nonnull SwitchStatement node, @Nonnull ImmutableList<Node> discriminant, @Nonnull ImmutableList<ImmutableList<Node>> cases) {
        return ImmutableList.<Node>of(node).append(super.reduceSwitchStatement(node, discriminant, cases));
    }

    @Nonnull
    @Override
    public ImmutableList<Node> reduceSwitchStatementWithDefault(@Nonnull SwitchStatementWithDefault node, @Nonnull ImmutableList<Node> discriminant, @Nonnull ImmutableList<ImmutableList<Node>> preDefaultCases, @Nonnull ImmutableList<Node> defaultCase, @Nonnull ImmutableList<ImmutableList<Node>> postDefaultCases) {
        return ImmutableList.<Node>of(node).append(super.reduceSwitchStatementWithDefault(node, discriminant, preDefaultCases, defaultCase, postDefaultCases));
    }

    @Nonnull
    @Override
    public ImmutableList<Node> reduceTemplateElement(@Nonnull TemplateElement node) {
        return ImmutableList.<Node>of(node);
    }

    @Nonnull
    @Override
    public ImmutableList<Node> reduceTemplateExpression(@Nonnull TemplateExpression node, @Nonnull Maybe<ImmutableList<Node>> tag, @Nonnull ImmutableList<ImmutableList<Node>> elements) {
        return ImmutableList.<Node>of(node).append(super.reduceTemplateExpression(node, tag, elements));
    }

    @Nonnull
    @Override
    public ImmutableList<Node> reduceThisExpression(@Nonnull ThisExpression node) {
        return ImmutableList.<Node>of(node);
    }

    @Nonnull
    @Override
    public ImmutableList<Node> reduceThrowStatement(@Nonnull ThrowStatement node, @Nonnull ImmutableList<Node> expression) {
        return ImmutableList.<Node>of(node).append(super.reduceThrowStatement(node, expression));
    }

    @Nonnull
    @Override
    public ImmutableList<Node> reduceTryCatchStatement(@Nonnull TryCatchStatement node, @Nonnull ImmutableList<Node> body, @Nonnull ImmutableList<Node> catchClause) {
        return ImmutableList.<Node>of(node).append(super.reduceTryCatchStatement(node, body, catchClause));
    }

    @Nonnull
    @Override
    public ImmutableList<Node> reduceTryFinallyStatement(@Nonnull TryFinallyStatement node, @Nonnull ImmutableList<Node> body, @Nonnull Maybe<ImmutableList<Node>> catchClause, @Nonnull ImmutableList<Node> finalizer) {
        return ImmutableList.<Node>of(node).append(super.reduceTryFinallyStatement(node, body, catchClause, finalizer));
    }

    @Nonnull
    @Override
    public ImmutableList<Node> reduceUnaryExpression(@Nonnull UnaryExpression node, @Nonnull ImmutableList<Node> operand) {
        return ImmutableList.<Node>of(node).append(super.reduceUnaryExpression(node, operand));
    }

    @Nonnull
    @Override
    public ImmutableList<Node> reduceUpdateExpression(@Nonnull UpdateExpression node, @Nonnull ImmutableList<Node> operand) {
        return ImmutableList.<Node>of(node).append(super.reduceUpdateExpression(node, operand));
    }

    @Nonnull
    @Override
    public ImmutableList<Node> reduceVariableDeclaration(@Nonnull VariableDeclaration node, @Nonnull ImmutableList<ImmutableList<Node>> declarators) {
        return ImmutableList.<Node>of(node).append(super.reduceVariableDeclaration(node, declarators));
    }

    @Nonnull
    @Override
    public ImmutableList<Node> reduceVariableDeclarationStatement(@Nonnull VariableDeclarationStatement node, @Nonnull ImmutableList<Node> declaration) {
        return ImmutableList.<Node>of(node).append(super.reduceVariableDeclarationStatement(node, declaration));
    }

    @Nonnull
    @Override
    public ImmutableList<Node> reduceVariableDeclarator(@Nonnull VariableDeclarator node, @Nonnull ImmutableList<Node> binding, @Nonnull Maybe<ImmutableList<Node>> init) {
        return ImmutableList.<Node>of(node).append(super.reduceVariableDeclarator(node, binding, init));
    }

    @Nonnull
    @Override
    public ImmutableList<Node> reduceWhileStatement(@Nonnull WhileStatement node, @Nonnull ImmutableList<Node> test, @Nonnull ImmutableList<Node> body) {
        return ImmutableList.<Node>of(node).append(super.reduceWhileStatement(node, test, body));
    }

    @Nonnull
    @Override
    public ImmutableList<Node> reduceWithStatement(@Nonnull WithStatement node, @Nonnull ImmutableList<Node> object, @Nonnull ImmutableList<Node> body) {
        return ImmutableList.<Node>of(node).append(super.reduceWithStatement(node, object, body));
    }

    @Nonnull
    @Override
    public ImmutableList<Node> reduceYieldExpression(@Nonnull YieldExpression node, @Nonnull Maybe<ImmutableList<Node>> expression) {
        return ImmutableList.<Node>of(node).append(super.reduceYieldExpression(node, expression));
    }

    @Nonnull
    @Override
    public ImmutableList<Node> reduceYieldGeneratorExpression(@Nonnull YieldGeneratorExpression node, @Nonnull ImmutableList<Node> expression) {
        return ImmutableList.<Node>of(node).append(super.reduceYieldGeneratorExpression(node, expression));
    }
}
