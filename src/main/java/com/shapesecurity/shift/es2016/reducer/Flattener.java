// Generated by shift-spec-java/reducer.js

/**
 * Copyright 2016 Shape Security, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License")
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.shapesecurity.shift.es2016.reducer;

import com.shapesecurity.functional.data.ImmutableList;
import com.shapesecurity.functional.data.Maybe;
import com.shapesecurity.shift.es2016.ast.ArrayAssignmentTarget;
import com.shapesecurity.shift.es2016.ast.ArrayBinding;
import com.shapesecurity.shift.es2016.ast.ArrayExpression;
import com.shapesecurity.shift.es2016.ast.ArrowExpression;
import com.shapesecurity.shift.es2016.ast.AssignmentExpression;
import com.shapesecurity.shift.es2016.ast.AssignmentTargetIdentifier;
import com.shapesecurity.shift.es2016.ast.AssignmentTargetPropertyIdentifier;
import com.shapesecurity.shift.es2016.ast.AssignmentTargetPropertyProperty;
import com.shapesecurity.shift.es2016.ast.AssignmentTargetWithDefault;
import com.shapesecurity.shift.es2016.ast.BinaryExpression;
import com.shapesecurity.shift.es2016.ast.BindingIdentifier;
import com.shapesecurity.shift.es2016.ast.BindingPropertyIdentifier;
import com.shapesecurity.shift.es2016.ast.BindingPropertyProperty;
import com.shapesecurity.shift.es2016.ast.BindingWithDefault;
import com.shapesecurity.shift.es2016.ast.Block;
import com.shapesecurity.shift.es2016.ast.BlockStatement;
import com.shapesecurity.shift.es2016.ast.BreakStatement;
import com.shapesecurity.shift.es2016.ast.CallExpression;
import com.shapesecurity.shift.es2016.ast.CatchClause;
import com.shapesecurity.shift.es2016.ast.ClassDeclaration;
import com.shapesecurity.shift.es2016.ast.ClassElement;
import com.shapesecurity.shift.es2016.ast.ClassExpression;
import com.shapesecurity.shift.es2016.ast.CompoundAssignmentExpression;
import com.shapesecurity.shift.es2016.ast.ComputedMemberAssignmentTarget;
import com.shapesecurity.shift.es2016.ast.ComputedMemberExpression;
import com.shapesecurity.shift.es2016.ast.ComputedPropertyName;
import com.shapesecurity.shift.es2016.ast.ConditionalExpression;
import com.shapesecurity.shift.es2016.ast.ContinueStatement;
import com.shapesecurity.shift.es2016.ast.DataProperty;
import com.shapesecurity.shift.es2016.ast.DebuggerStatement;
import com.shapesecurity.shift.es2016.ast.Directive;
import com.shapesecurity.shift.es2016.ast.DoWhileStatement;
import com.shapesecurity.shift.es2016.ast.EmptyStatement;
import com.shapesecurity.shift.es2016.ast.Export;
import com.shapesecurity.shift.es2016.ast.ExportAllFrom;
import com.shapesecurity.shift.es2016.ast.ExportDefault;
import com.shapesecurity.shift.es2016.ast.ExportFrom;
import com.shapesecurity.shift.es2016.ast.ExportFromSpecifier;
import com.shapesecurity.shift.es2016.ast.ExportLocalSpecifier;
import com.shapesecurity.shift.es2016.ast.ExportLocals;
import com.shapesecurity.shift.es2016.ast.ExpressionStatement;
import com.shapesecurity.shift.es2016.ast.ForInStatement;
import com.shapesecurity.shift.es2016.ast.ForOfStatement;
import com.shapesecurity.shift.es2016.ast.ForStatement;
import com.shapesecurity.shift.es2016.ast.FormalParameters;
import com.shapesecurity.shift.es2016.ast.FunctionBody;
import com.shapesecurity.shift.es2016.ast.FunctionDeclaration;
import com.shapesecurity.shift.es2016.ast.FunctionExpression;
import com.shapesecurity.shift.es2016.ast.Getter;
import com.shapesecurity.shift.es2016.ast.IdentifierExpression;
import com.shapesecurity.shift.es2016.ast.IfStatement;
import com.shapesecurity.shift.es2016.ast.Import;
import com.shapesecurity.shift.es2016.ast.ImportNamespace;
import com.shapesecurity.shift.es2016.ast.ImportSpecifier;
import com.shapesecurity.shift.es2016.ast.LabeledStatement;
import com.shapesecurity.shift.es2016.ast.LiteralBooleanExpression;
import com.shapesecurity.shift.es2016.ast.LiteralInfinityExpression;
import com.shapesecurity.shift.es2016.ast.LiteralNullExpression;
import com.shapesecurity.shift.es2016.ast.LiteralNumericExpression;
import com.shapesecurity.shift.es2016.ast.LiteralRegExpExpression;
import com.shapesecurity.shift.es2016.ast.LiteralStringExpression;
import com.shapesecurity.shift.es2016.ast.Method;
import com.shapesecurity.shift.es2016.ast.Module;
import com.shapesecurity.shift.es2016.ast.NewExpression;
import com.shapesecurity.shift.es2016.ast.NewTargetExpression;
import com.shapesecurity.shift.es2016.ast.Node;
import com.shapesecurity.shift.es2016.ast.ObjectAssignmentTarget;
import com.shapesecurity.shift.es2016.ast.ObjectBinding;
import com.shapesecurity.shift.es2016.ast.ObjectExpression;
import com.shapesecurity.shift.es2016.ast.Program;
import com.shapesecurity.shift.es2016.ast.ReturnStatement;
import com.shapesecurity.shift.es2016.ast.Script;
import com.shapesecurity.shift.es2016.ast.Setter;
import com.shapesecurity.shift.es2016.ast.ShorthandProperty;
import com.shapesecurity.shift.es2016.ast.SpreadElement;
import com.shapesecurity.shift.es2016.ast.StaticMemberAssignmentTarget;
import com.shapesecurity.shift.es2016.ast.StaticMemberExpression;
import com.shapesecurity.shift.es2016.ast.StaticPropertyName;
import com.shapesecurity.shift.es2016.ast.Super;
import com.shapesecurity.shift.es2016.ast.SwitchCase;
import com.shapesecurity.shift.es2016.ast.SwitchDefault;
import com.shapesecurity.shift.es2016.ast.SwitchStatement;
import com.shapesecurity.shift.es2016.ast.SwitchStatementWithDefault;
import com.shapesecurity.shift.es2016.ast.TemplateElement;
import com.shapesecurity.shift.es2016.ast.TemplateExpression;
import com.shapesecurity.shift.es2016.ast.ThisExpression;
import com.shapesecurity.shift.es2016.ast.ThrowStatement;
import com.shapesecurity.shift.es2016.ast.TryCatchStatement;
import com.shapesecurity.shift.es2016.ast.TryFinallyStatement;
import com.shapesecurity.shift.es2016.ast.UnaryExpression;
import com.shapesecurity.shift.es2016.ast.UpdateExpression;
import com.shapesecurity.shift.es2016.ast.VariableDeclaration;
import com.shapesecurity.shift.es2016.ast.VariableDeclarationStatement;
import com.shapesecurity.shift.es2016.ast.VariableDeclarator;
import com.shapesecurity.shift.es2016.ast.WhileStatement;
import com.shapesecurity.shift.es2016.ast.WithStatement;
import com.shapesecurity.shift.es2016.ast.YieldExpression;
import com.shapesecurity.shift.es2016.ast.YieldGeneratorExpression;
import org.jetbrains.annotations.NotNull;

public class Flattener extends MonoidalReducer<ImmutableList<Node>> {
    private static final Flattener INSTANCE = new Flattener();

    private Flattener() {
        super(new com.shapesecurity.functional.data.Monoid.ImmutableListAppend<>());
    }

    @NotNull
    public static ImmutableList<Node> flatten(@NotNull Program program) {
        return Director.reduceProgram(INSTANCE, program);
    }

    @NotNull
    @Override
    public ImmutableList<Node> reduceArrayAssignmentTarget(@NotNull ArrayAssignmentTarget node, @NotNull ImmutableList<Maybe<ImmutableList<Node>>> elements, @NotNull Maybe<ImmutableList<Node>> rest) {
        return ImmutableList.<Node>of(node).append(super.reduceArrayAssignmentTarget(node, elements, rest));
    }

    @NotNull
    @Override
    public ImmutableList<Node> reduceArrayBinding(@NotNull ArrayBinding node, @NotNull ImmutableList<Maybe<ImmutableList<Node>>> elements, @NotNull Maybe<ImmutableList<Node>> rest) {
        return ImmutableList.<Node>of(node).append(super.reduceArrayBinding(node, elements, rest));
    }

    @NotNull
    @Override
    public ImmutableList<Node> reduceArrayExpression(@NotNull ArrayExpression node, @NotNull ImmutableList<Maybe<ImmutableList<Node>>> elements) {
        return ImmutableList.<Node>of(node).append(super.reduceArrayExpression(node, elements));
    }

    @NotNull
    @Override
    public ImmutableList<Node> reduceArrowExpression(@NotNull ArrowExpression node, @NotNull ImmutableList<Node> params, @NotNull ImmutableList<Node> body) {
        return ImmutableList.<Node>of(node).append(super.reduceArrowExpression(node, params, body));
    }

    @NotNull
    @Override
    public ImmutableList<Node> reduceAssignmentExpression(@NotNull AssignmentExpression node, @NotNull ImmutableList<Node> binding, @NotNull ImmutableList<Node> expression) {
        return ImmutableList.<Node>of(node).append(super.reduceAssignmentExpression(node, binding, expression));
    }

    @NotNull
    @Override
    public ImmutableList<Node> reduceAssignmentTargetIdentifier(@NotNull AssignmentTargetIdentifier node) {
        return ImmutableList.<Node>of(node);
    }

    @NotNull
    @Override
    public ImmutableList<Node> reduceAssignmentTargetPropertyIdentifier(@NotNull AssignmentTargetPropertyIdentifier node, @NotNull ImmutableList<Node> binding, @NotNull Maybe<ImmutableList<Node>> init) {
        return ImmutableList.<Node>of(node).append(super.reduceAssignmentTargetPropertyIdentifier(node, binding, init));
    }

    @NotNull
    @Override
    public ImmutableList<Node> reduceAssignmentTargetPropertyProperty(@NotNull AssignmentTargetPropertyProperty node, @NotNull ImmutableList<Node> name, @NotNull ImmutableList<Node> binding) {
        return ImmutableList.<Node>of(node).append(super.reduceAssignmentTargetPropertyProperty(node, name, binding));
    }

    @NotNull
    @Override
    public ImmutableList<Node> reduceAssignmentTargetWithDefault(@NotNull AssignmentTargetWithDefault node, @NotNull ImmutableList<Node> binding, @NotNull ImmutableList<Node> init) {
        return ImmutableList.<Node>of(node).append(super.reduceAssignmentTargetWithDefault(node, binding, init));
    }

    @NotNull
    @Override
    public ImmutableList<Node> reduceBinaryExpression(@NotNull BinaryExpression node, @NotNull ImmutableList<Node> left, @NotNull ImmutableList<Node> right) {
        return ImmutableList.<Node>of(node).append(super.reduceBinaryExpression(node, left, right));
    }

    @NotNull
    @Override
    public ImmutableList<Node> reduceBindingIdentifier(@NotNull BindingIdentifier node) {
        return ImmutableList.<Node>of(node);
    }

    @NotNull
    @Override
    public ImmutableList<Node> reduceBindingPropertyIdentifier(@NotNull BindingPropertyIdentifier node, @NotNull ImmutableList<Node> binding, @NotNull Maybe<ImmutableList<Node>> init) {
        return ImmutableList.<Node>of(node).append(super.reduceBindingPropertyIdentifier(node, binding, init));
    }

    @NotNull
    @Override
    public ImmutableList<Node> reduceBindingPropertyProperty(@NotNull BindingPropertyProperty node, @NotNull ImmutableList<Node> name, @NotNull ImmutableList<Node> binding) {
        return ImmutableList.<Node>of(node).append(super.reduceBindingPropertyProperty(node, name, binding));
    }

    @NotNull
    @Override
    public ImmutableList<Node> reduceBindingWithDefault(@NotNull BindingWithDefault node, @NotNull ImmutableList<Node> binding, @NotNull ImmutableList<Node> init) {
        return ImmutableList.<Node>of(node).append(super.reduceBindingWithDefault(node, binding, init));
    }

    @NotNull
    @Override
    public ImmutableList<Node> reduceBlock(@NotNull Block node, @NotNull ImmutableList<ImmutableList<Node>> statements) {
        return ImmutableList.<Node>of(node).append(super.reduceBlock(node, statements));
    }

    @NotNull
    @Override
    public ImmutableList<Node> reduceBlockStatement(@NotNull BlockStatement node, @NotNull ImmutableList<Node> block) {
        return ImmutableList.<Node>of(node).append(super.reduceBlockStatement(node, block));
    }

    @NotNull
    @Override
    public ImmutableList<Node> reduceBreakStatement(@NotNull BreakStatement node) {
        return ImmutableList.<Node>of(node);
    }

    @NotNull
    @Override
    public ImmutableList<Node> reduceCallExpression(@NotNull CallExpression node, @NotNull ImmutableList<Node> callee, @NotNull ImmutableList<ImmutableList<Node>> arguments) {
        return ImmutableList.<Node>of(node).append(super.reduceCallExpression(node, callee, arguments));
    }

    @NotNull
    @Override
    public ImmutableList<Node> reduceCatchClause(@NotNull CatchClause node, @NotNull ImmutableList<Node> binding, @NotNull ImmutableList<Node> body) {
        return ImmutableList.<Node>of(node).append(super.reduceCatchClause(node, binding, body));
    }

    @NotNull
    @Override
    public ImmutableList<Node> reduceClassDeclaration(@NotNull ClassDeclaration node, @NotNull ImmutableList<Node> name, @NotNull Maybe<ImmutableList<Node>> _super, @NotNull ImmutableList<ImmutableList<Node>> elements) {
        return ImmutableList.<Node>of(node).append(super.reduceClassDeclaration(node, name, _super, elements));
    }

    @NotNull
    @Override
    public ImmutableList<Node> reduceClassElement(@NotNull ClassElement node, @NotNull ImmutableList<Node> method) {
        return ImmutableList.<Node>of(node).append(super.reduceClassElement(node, method));
    }

    @NotNull
    @Override
    public ImmutableList<Node> reduceClassExpression(@NotNull ClassExpression node, @NotNull Maybe<ImmutableList<Node>> name, @NotNull Maybe<ImmutableList<Node>> _super, @NotNull ImmutableList<ImmutableList<Node>> elements) {
        return ImmutableList.<Node>of(node).append(super.reduceClassExpression(node, name, _super, elements));
    }

    @NotNull
    @Override
    public ImmutableList<Node> reduceCompoundAssignmentExpression(@NotNull CompoundAssignmentExpression node, @NotNull ImmutableList<Node> binding, @NotNull ImmutableList<Node> expression) {
        return ImmutableList.<Node>of(node).append(super.reduceCompoundAssignmentExpression(node, binding, expression));
    }

    @NotNull
    @Override
    public ImmutableList<Node> reduceComputedMemberAssignmentTarget(@NotNull ComputedMemberAssignmentTarget node, @NotNull ImmutableList<Node> object, @NotNull ImmutableList<Node> expression) {
        return ImmutableList.<Node>of(node).append(super.reduceComputedMemberAssignmentTarget(node, object, expression));
    }

    @NotNull
    @Override
    public ImmutableList<Node> reduceComputedMemberExpression(@NotNull ComputedMemberExpression node, @NotNull ImmutableList<Node> object, @NotNull ImmutableList<Node> expression) {
        return ImmutableList.<Node>of(node).append(super.reduceComputedMemberExpression(node, object, expression));
    }

    @NotNull
    @Override
    public ImmutableList<Node> reduceComputedPropertyName(@NotNull ComputedPropertyName node, @NotNull ImmutableList<Node> expression) {
        return ImmutableList.<Node>of(node).append(super.reduceComputedPropertyName(node, expression));
    }

    @NotNull
    @Override
    public ImmutableList<Node> reduceConditionalExpression(@NotNull ConditionalExpression node, @NotNull ImmutableList<Node> test, @NotNull ImmutableList<Node> consequent, @NotNull ImmutableList<Node> alternate) {
        return ImmutableList.<Node>of(node).append(super.reduceConditionalExpression(node, test, consequent, alternate));
    }

    @NotNull
    @Override
    public ImmutableList<Node> reduceContinueStatement(@NotNull ContinueStatement node) {
        return ImmutableList.<Node>of(node);
    }

    @NotNull
    @Override
    public ImmutableList<Node> reduceDataProperty(@NotNull DataProperty node, @NotNull ImmutableList<Node> name, @NotNull ImmutableList<Node> expression) {
        return ImmutableList.<Node>of(node).append(super.reduceDataProperty(node, name, expression));
    }

    @NotNull
    @Override
    public ImmutableList<Node> reduceDebuggerStatement(@NotNull DebuggerStatement node) {
        return ImmutableList.<Node>of(node);
    }

    @NotNull
    @Override
    public ImmutableList<Node> reduceDirective(@NotNull Directive node) {
        return ImmutableList.<Node>of(node);
    }

    @NotNull
    @Override
    public ImmutableList<Node> reduceDoWhileStatement(@NotNull DoWhileStatement node, @NotNull ImmutableList<Node> body, @NotNull ImmutableList<Node> test) {
        return ImmutableList.<Node>of(node).append(super.reduceDoWhileStatement(node, body, test));
    }

    @NotNull
    @Override
    public ImmutableList<Node> reduceEmptyStatement(@NotNull EmptyStatement node) {
        return ImmutableList.<Node>of(node);
    }

    @NotNull
    @Override
    public ImmutableList<Node> reduceExport(@NotNull Export node, @NotNull ImmutableList<Node> declaration) {
        return ImmutableList.<Node>of(node).append(super.reduceExport(node, declaration));
    }

    @NotNull
    @Override
    public ImmutableList<Node> reduceExportAllFrom(@NotNull ExportAllFrom node) {
        return ImmutableList.<Node>of(node);
    }

    @NotNull
    @Override
    public ImmutableList<Node> reduceExportDefault(@NotNull ExportDefault node, @NotNull ImmutableList<Node> body) {
        return ImmutableList.<Node>of(node).append(super.reduceExportDefault(node, body));
    }

    @NotNull
    @Override
    public ImmutableList<Node> reduceExportFrom(@NotNull ExportFrom node, @NotNull ImmutableList<ImmutableList<Node>> namedExports) {
        return ImmutableList.<Node>of(node).append(super.reduceExportFrom(node, namedExports));
    }

    @NotNull
    @Override
    public ImmutableList<Node> reduceExportFromSpecifier(@NotNull ExportFromSpecifier node) {
        return ImmutableList.<Node>of(node);
    }

    @NotNull
    @Override
    public ImmutableList<Node> reduceExportLocalSpecifier(@NotNull ExportLocalSpecifier node, @NotNull ImmutableList<Node> name) {
        return ImmutableList.<Node>of(node).append(super.reduceExportLocalSpecifier(node, name));
    }

    @NotNull
    @Override
    public ImmutableList<Node> reduceExportLocals(@NotNull ExportLocals node, @NotNull ImmutableList<ImmutableList<Node>> namedExports) {
        return ImmutableList.<Node>of(node).append(super.reduceExportLocals(node, namedExports));
    }

    @NotNull
    @Override
    public ImmutableList<Node> reduceExpressionStatement(@NotNull ExpressionStatement node, @NotNull ImmutableList<Node> expression) {
        return ImmutableList.<Node>of(node).append(super.reduceExpressionStatement(node, expression));
    }

    @NotNull
    @Override
    public ImmutableList<Node> reduceForInStatement(@NotNull ForInStatement node, @NotNull ImmutableList<Node> left, @NotNull ImmutableList<Node> right, @NotNull ImmutableList<Node> body) {
        return ImmutableList.<Node>of(node).append(super.reduceForInStatement(node, left, right, body));
    }

    @NotNull
    @Override
    public ImmutableList<Node> reduceForOfStatement(@NotNull ForOfStatement node, @NotNull ImmutableList<Node> left, @NotNull ImmutableList<Node> right, @NotNull ImmutableList<Node> body) {
        return ImmutableList.<Node>of(node).append(super.reduceForOfStatement(node, left, right, body));
    }

    @NotNull
    @Override
    public ImmutableList<Node> reduceForStatement(@NotNull ForStatement node, @NotNull Maybe<ImmutableList<Node>> init, @NotNull Maybe<ImmutableList<Node>> test, @NotNull Maybe<ImmutableList<Node>> update, @NotNull ImmutableList<Node> body) {
        return ImmutableList.<Node>of(node).append(super.reduceForStatement(node, init, test, update, body));
    }

    @NotNull
    @Override
    public ImmutableList<Node> reduceFormalParameters(@NotNull FormalParameters node, @NotNull ImmutableList<ImmutableList<Node>> items, @NotNull Maybe<ImmutableList<Node>> rest) {
        return ImmutableList.<Node>of(node).append(super.reduceFormalParameters(node, items, rest));
    }

    @NotNull
    @Override
    public ImmutableList<Node> reduceFunctionBody(@NotNull FunctionBody node, @NotNull ImmutableList<ImmutableList<Node>> directives, @NotNull ImmutableList<ImmutableList<Node>> statements) {
        return ImmutableList.<Node>of(node).append(super.reduceFunctionBody(node, directives, statements));
    }

    @NotNull
    @Override
    public ImmutableList<Node> reduceFunctionDeclaration(@NotNull FunctionDeclaration node, @NotNull ImmutableList<Node> name, @NotNull ImmutableList<Node> params, @NotNull ImmutableList<Node> body) {
        return ImmutableList.<Node>of(node).append(super.reduceFunctionDeclaration(node, name, params, body));
    }

    @NotNull
    @Override
    public ImmutableList<Node> reduceFunctionExpression(@NotNull FunctionExpression node, @NotNull Maybe<ImmutableList<Node>> name, @NotNull ImmutableList<Node> params, @NotNull ImmutableList<Node> body) {
        return ImmutableList.<Node>of(node).append(super.reduceFunctionExpression(node, name, params, body));
    }

    @NotNull
    @Override
    public ImmutableList<Node> reduceGetter(@NotNull Getter node, @NotNull ImmutableList<Node> name, @NotNull ImmutableList<Node> body) {
        return ImmutableList.<Node>of(node).append(super.reduceGetter(node, name, body));
    }

    @NotNull
    @Override
    public ImmutableList<Node> reduceIdentifierExpression(@NotNull IdentifierExpression node) {
        return ImmutableList.<Node>of(node);
    }

    @NotNull
    @Override
    public ImmutableList<Node> reduceIfStatement(@NotNull IfStatement node, @NotNull ImmutableList<Node> test, @NotNull ImmutableList<Node> consequent, @NotNull Maybe<ImmutableList<Node>> alternate) {
        return ImmutableList.<Node>of(node).append(super.reduceIfStatement(node, test, consequent, alternate));
    }

    @NotNull
    @Override
    public ImmutableList<Node> reduceImport(@NotNull Import node, @NotNull Maybe<ImmutableList<Node>> defaultBinding, @NotNull ImmutableList<ImmutableList<Node>> namedImports) {
        return ImmutableList.<Node>of(node).append(super.reduceImport(node, defaultBinding, namedImports));
    }

    @NotNull
    @Override
    public ImmutableList<Node> reduceImportNamespace(@NotNull ImportNamespace node, @NotNull Maybe<ImmutableList<Node>> defaultBinding, @NotNull ImmutableList<Node> namespaceBinding) {
        return ImmutableList.<Node>of(node).append(super.reduceImportNamespace(node, defaultBinding, namespaceBinding));
    }

    @NotNull
    @Override
    public ImmutableList<Node> reduceImportSpecifier(@NotNull ImportSpecifier node, @NotNull ImmutableList<Node> binding) {
        return ImmutableList.<Node>of(node).append(super.reduceImportSpecifier(node, binding));
    }

    @NotNull
    @Override
    public ImmutableList<Node> reduceLabeledStatement(@NotNull LabeledStatement node, @NotNull ImmutableList<Node> body) {
        return ImmutableList.<Node>of(node).append(super.reduceLabeledStatement(node, body));
    }

    @NotNull
    @Override
    public ImmutableList<Node> reduceLiteralBooleanExpression(@NotNull LiteralBooleanExpression node) {
        return ImmutableList.<Node>of(node);
    }

    @NotNull
    @Override
    public ImmutableList<Node> reduceLiteralInfinityExpression(@NotNull LiteralInfinityExpression node) {
        return ImmutableList.<Node>of(node);
    }

    @NotNull
    @Override
    public ImmutableList<Node> reduceLiteralNullExpression(@NotNull LiteralNullExpression node) {
        return ImmutableList.<Node>of(node);
    }

    @NotNull
    @Override
    public ImmutableList<Node> reduceLiteralNumericExpression(@NotNull LiteralNumericExpression node) {
        return ImmutableList.<Node>of(node);
    }

    @NotNull
    @Override
    public ImmutableList<Node> reduceLiteralRegExpExpression(@NotNull LiteralRegExpExpression node) {
        return ImmutableList.<Node>of(node);
    }

    @NotNull
    @Override
    public ImmutableList<Node> reduceLiteralStringExpression(@NotNull LiteralStringExpression node) {
        return ImmutableList.<Node>of(node);
    }

    @NotNull
    @Override
    public ImmutableList<Node> reduceMethod(@NotNull Method node, @NotNull ImmutableList<Node> name, @NotNull ImmutableList<Node> params, @NotNull ImmutableList<Node> body) {
        return ImmutableList.<Node>of(node).append(super.reduceMethod(node, name, params, body));
    }

    @NotNull
    @Override
    public ImmutableList<Node> reduceModule(@NotNull Module node, @NotNull ImmutableList<ImmutableList<Node>> directives, @NotNull ImmutableList<ImmutableList<Node>> items) {
        return ImmutableList.<Node>of(node).append(super.reduceModule(node, directives, items));
    }

    @NotNull
    @Override
    public ImmutableList<Node> reduceNewExpression(@NotNull NewExpression node, @NotNull ImmutableList<Node> callee, @NotNull ImmutableList<ImmutableList<Node>> arguments) {
        return ImmutableList.<Node>of(node).append(super.reduceNewExpression(node, callee, arguments));
    }

    @NotNull
    @Override
    public ImmutableList<Node> reduceNewTargetExpression(@NotNull NewTargetExpression node) {
        return ImmutableList.<Node>of(node);
    }

    @NotNull
    @Override
    public ImmutableList<Node> reduceObjectAssignmentTarget(@NotNull ObjectAssignmentTarget node, @NotNull ImmutableList<ImmutableList<Node>> properties) {
        return ImmutableList.<Node>of(node).append(super.reduceObjectAssignmentTarget(node, properties));
    }

    @NotNull
    @Override
    public ImmutableList<Node> reduceObjectBinding(@NotNull ObjectBinding node, @NotNull ImmutableList<ImmutableList<Node>> properties) {
        return ImmutableList.<Node>of(node).append(super.reduceObjectBinding(node, properties));
    }

    @NotNull
    @Override
    public ImmutableList<Node> reduceObjectExpression(@NotNull ObjectExpression node, @NotNull ImmutableList<ImmutableList<Node>> properties) {
        return ImmutableList.<Node>of(node).append(super.reduceObjectExpression(node, properties));
    }

    @NotNull
    @Override
    public ImmutableList<Node> reduceReturnStatement(@NotNull ReturnStatement node, @NotNull Maybe<ImmutableList<Node>> expression) {
        return ImmutableList.<Node>of(node).append(super.reduceReturnStatement(node, expression));
    }

    @NotNull
    @Override
    public ImmutableList<Node> reduceScript(@NotNull Script node, @NotNull ImmutableList<ImmutableList<Node>> directives, @NotNull ImmutableList<ImmutableList<Node>> statements) {
        return ImmutableList.<Node>of(node).append(super.reduceScript(node, directives, statements));
    }

    @NotNull
    @Override
    public ImmutableList<Node> reduceSetter(@NotNull Setter node, @NotNull ImmutableList<Node> name, @NotNull ImmutableList<Node> param, @NotNull ImmutableList<Node> body) {
        return ImmutableList.<Node>of(node).append(super.reduceSetter(node, name, param, body));
    }

    @NotNull
    @Override
    public ImmutableList<Node> reduceShorthandProperty(@NotNull ShorthandProperty node, @NotNull ImmutableList<Node> name) {
        return ImmutableList.<Node>of(node).append(super.reduceShorthandProperty(node, name));
    }

    @NotNull
    @Override
    public ImmutableList<Node> reduceSpreadElement(@NotNull SpreadElement node, @NotNull ImmutableList<Node> expression) {
        return ImmutableList.<Node>of(node).append(super.reduceSpreadElement(node, expression));
    }

    @NotNull
    @Override
    public ImmutableList<Node> reduceStaticMemberAssignmentTarget(@NotNull StaticMemberAssignmentTarget node, @NotNull ImmutableList<Node> object) {
        return ImmutableList.<Node>of(node).append(super.reduceStaticMemberAssignmentTarget(node, object));
    }

    @NotNull
    @Override
    public ImmutableList<Node> reduceStaticMemberExpression(@NotNull StaticMemberExpression node, @NotNull ImmutableList<Node> object) {
        return ImmutableList.<Node>of(node).append(super.reduceStaticMemberExpression(node, object));
    }

    @NotNull
    @Override
    public ImmutableList<Node> reduceStaticPropertyName(@NotNull StaticPropertyName node) {
        return ImmutableList.<Node>of(node);
    }

    @NotNull
    @Override
    public ImmutableList<Node> reduceSuper(@NotNull Super node) {
        return ImmutableList.<Node>of(node);
    }

    @NotNull
    @Override
    public ImmutableList<Node> reduceSwitchCase(@NotNull SwitchCase node, @NotNull ImmutableList<Node> test, @NotNull ImmutableList<ImmutableList<Node>> consequent) {
        return ImmutableList.<Node>of(node).append(super.reduceSwitchCase(node, test, consequent));
    }

    @NotNull
    @Override
    public ImmutableList<Node> reduceSwitchDefault(@NotNull SwitchDefault node, @NotNull ImmutableList<ImmutableList<Node>> consequent) {
        return ImmutableList.<Node>of(node).append(super.reduceSwitchDefault(node, consequent));
    }

    @NotNull
    @Override
    public ImmutableList<Node> reduceSwitchStatement(@NotNull SwitchStatement node, @NotNull ImmutableList<Node> discriminant, @NotNull ImmutableList<ImmutableList<Node>> cases) {
        return ImmutableList.<Node>of(node).append(super.reduceSwitchStatement(node, discriminant, cases));
    }

    @NotNull
    @Override
    public ImmutableList<Node> reduceSwitchStatementWithDefault(@NotNull SwitchStatementWithDefault node, @NotNull ImmutableList<Node> discriminant, @NotNull ImmutableList<ImmutableList<Node>> preDefaultCases, @NotNull ImmutableList<Node> defaultCase, @NotNull ImmutableList<ImmutableList<Node>> postDefaultCases) {
        return ImmutableList.<Node>of(node).append(super.reduceSwitchStatementWithDefault(node, discriminant, preDefaultCases, defaultCase, postDefaultCases));
    }

    @NotNull
    @Override
    public ImmutableList<Node> reduceTemplateElement(@NotNull TemplateElement node) {
        return ImmutableList.<Node>of(node);
    }

    @NotNull
    @Override
    public ImmutableList<Node> reduceTemplateExpression(@NotNull TemplateExpression node, @NotNull Maybe<ImmutableList<Node>> tag, @NotNull ImmutableList<ImmutableList<Node>> elements) {
        return ImmutableList.<Node>of(node).append(super.reduceTemplateExpression(node, tag, elements));
    }

    @NotNull
    @Override
    public ImmutableList<Node> reduceThisExpression(@NotNull ThisExpression node) {
        return ImmutableList.<Node>of(node);
    }

    @NotNull
    @Override
    public ImmutableList<Node> reduceThrowStatement(@NotNull ThrowStatement node, @NotNull ImmutableList<Node> expression) {
        return ImmutableList.<Node>of(node).append(super.reduceThrowStatement(node, expression));
    }

    @NotNull
    @Override
    public ImmutableList<Node> reduceTryCatchStatement(@NotNull TryCatchStatement node, @NotNull ImmutableList<Node> body, @NotNull ImmutableList<Node> catchClause) {
        return ImmutableList.<Node>of(node).append(super.reduceTryCatchStatement(node, body, catchClause));
    }

    @NotNull
    @Override
    public ImmutableList<Node> reduceTryFinallyStatement(@NotNull TryFinallyStatement node, @NotNull ImmutableList<Node> body, @NotNull Maybe<ImmutableList<Node>> catchClause, @NotNull ImmutableList<Node> finalizer) {
        return ImmutableList.<Node>of(node).append(super.reduceTryFinallyStatement(node, body, catchClause, finalizer));
    }

    @NotNull
    @Override
    public ImmutableList<Node> reduceUnaryExpression(@NotNull UnaryExpression node, @NotNull ImmutableList<Node> operand) {
        return ImmutableList.<Node>of(node).append(super.reduceUnaryExpression(node, operand));
    }

    @NotNull
    @Override
    public ImmutableList<Node> reduceUpdateExpression(@NotNull UpdateExpression node, @NotNull ImmutableList<Node> operand) {
        return ImmutableList.<Node>of(node).append(super.reduceUpdateExpression(node, operand));
    }

    @NotNull
    @Override
    public ImmutableList<Node> reduceVariableDeclaration(@NotNull VariableDeclaration node, @NotNull ImmutableList<ImmutableList<Node>> declarators) {
        return ImmutableList.<Node>of(node).append(super.reduceVariableDeclaration(node, declarators));
    }

    @NotNull
    @Override
    public ImmutableList<Node> reduceVariableDeclarationStatement(@NotNull VariableDeclarationStatement node, @NotNull ImmutableList<Node> declaration) {
        return ImmutableList.<Node>of(node).append(super.reduceVariableDeclarationStatement(node, declaration));
    }

    @NotNull
    @Override
    public ImmutableList<Node> reduceVariableDeclarator(@NotNull VariableDeclarator node, @NotNull ImmutableList<Node> binding, @NotNull Maybe<ImmutableList<Node>> init) {
        return ImmutableList.<Node>of(node).append(super.reduceVariableDeclarator(node, binding, init));
    }

    @NotNull
    @Override
    public ImmutableList<Node> reduceWhileStatement(@NotNull WhileStatement node, @NotNull ImmutableList<Node> test, @NotNull ImmutableList<Node> body) {
        return ImmutableList.<Node>of(node).append(super.reduceWhileStatement(node, test, body));
    }

    @NotNull
    @Override
    public ImmutableList<Node> reduceWithStatement(@NotNull WithStatement node, @NotNull ImmutableList<Node> object, @NotNull ImmutableList<Node> body) {
        return ImmutableList.<Node>of(node).append(super.reduceWithStatement(node, object, body));
    }

    @NotNull
    @Override
    public ImmutableList<Node> reduceYieldExpression(@NotNull YieldExpression node, @NotNull Maybe<ImmutableList<Node>> expression) {
        return ImmutableList.<Node>of(node).append(super.reduceYieldExpression(node, expression));
    }

    @NotNull
    @Override
    public ImmutableList<Node> reduceYieldGeneratorExpression(@NotNull YieldGeneratorExpression node, @NotNull ImmutableList<Node> expression) {
        return ImmutableList.<Node>of(node).append(super.reduceYieldGeneratorExpression(node, expression));
    }
}
